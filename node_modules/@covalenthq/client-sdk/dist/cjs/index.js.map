{"version":3,"file":"index.js","sources":["../../src/utils/functions/bigIntParser.ts","../../src/utils/functions/endpointGenerator.ts","../../src/utils/functions/paginateEndpoint.ts","../../src/services/BalanceService.ts","../../src/services/BaseService.ts","../../src/services/NftService.ts","../../src/services/PricingService.ts","../../src/services/SecurityService.ts","../../src/services/TransactionService.ts","../../src/utils/functions/debugOutput.ts","../../node_modules/yocto-queue/index.js","../../node_modules/p-limit/index.js","../../src/utils/functions/execution.ts","../../src/utils/functions/isValidApiKey.ts","../../src/GoldRushClient.ts","../../node_modules/big.js/big.mjs","../../src/utils/functions/calculatePrettyBalance.ts","../../src/utils/functions/prettifyCurrency.ts","../../src/utils/types/Generic.types.ts"],"sourcesContent":["export const bigIntParser = (\n  val: null | undefined | string | number | bigint\n): bigint | null => {\n  if (val === null || val === undefined) {\n    return null;\n  }\n\n  return BigInt(val);\n};\n","const baseUrl: string = \"https://api.covalenthq.com/v1\";\n\nexport const endpointGenerator = (\n  extension: string = \"\",\n  params: {\n    key: string;\n    value: boolean | null | string | number | undefined;\n  }[] = []\n): URL => {\n  extension = extension.replace(baseUrl, \"\");\n  if (extension.startsWith(\"/\")) {\n    extension = extension.slice(1);\n  }\n  if (!extension.endsWith(\"/\")) {\n    extension = `${extension}/`;\n  }\n\n  const urlParams = new URLSearchParams();\n\n  params.forEach((param) => {\n    if (param.value !== undefined && param.value !== null) {\n      urlParams.append(param.key, param.value.toString());\n    }\n  });\n\n  return new URL(`${baseUrl}/${extension}?${urlParams}`);\n};\n","import {\n  type GoldRushResponse,\n  type Nullable,\n  type Pagination,\n  type PaginationLinks,\n} from \"../types/Generic.types\";\nimport { type Execution } from \"./execution\";\n\nexport async function* paginateEndpoint<\n  T extends\n    | Nullable<{ pagination: Pagination }>\n    | Nullable<{ links: PaginationLinks }>\n    | null,\n>(\n  endpoint: URL,\n  execution: Execution,\n  parseData: (data: GoldRushResponse<T>) => GoldRushResponse<T>,\n  implementation: \"pagination\" | \"links\"\n): AsyncIterable<GoldRushResponse<T>> {\n  let _endpoint: URL = new URL(endpoint);\n  let hasMore: boolean = true;\n  let page_number: number = +(_endpoint.searchParams.get(\"page-number\") ?? 0);\n\n  while (hasMore) {\n    try {\n      if (implementation === \"pagination\") {\n        _endpoint.searchParams.set(\"page-number\", page_number.toString());\n\n        const parsedData = await execution.execute<T>(_endpoint, parseData);\n\n        if (parsedData.error) {\n          throw parsedData;\n        }\n\n        if (\n          !(\n            parsedData.data as {\n              pagination: Pagination;\n            }\n          )?.pagination?.has_more\n        ) {\n          hasMore = false;\n        } else {\n          page_number++;\n        }\n\n        yield parsedData as GoldRushResponse<T>;\n      } else if (implementation === \"links\") {\n        const parsedData = await execution.execute<T>(_endpoint, parseData);\n        const prevLink: string | null =\n          (\n            parsedData.data as {\n              links: PaginationLinks;\n            }\n          )?.links?.prev || null;\n\n        if (!prevLink) {\n          hasMore = false;\n        } else {\n          _endpoint = new URL(`${prevLink}?${_endpoint.searchParams}`);\n        }\n\n        yield parsedData as GoldRushResponse<T>;\n      }\n    } catch (error: any) {\n      hasMore = false;\n      yield {\n        data: null,\n        error: true,\n        error_code: error?.cause?.code || error?.error_code || 500,\n        error_message:\n          error?.cause?.message ||\n          error?.error_message ||\n          \"Internal server error\",\n      };\n    }\n  }\n}\n","import { bigIntParser } from \"../utils/functions/bigIntParser\";\nimport { endpointGenerator } from \"../utils/functions/endpointGenerator\";\nimport { type Execution } from \"../utils/functions/execution\";\nimport { paginateEndpoint } from \"../utils/functions/paginateEndpoint\";\nimport {\n  type BalancesResponse,\n  type Erc20TransfersResponse,\n  type GetErc20TransfersForWalletAddressQueryParamOpts,\n  type GetHistoricalPortfolioForWalletAddressQueryParamOpts,\n  type GetHistoricalTokenBalancesForWalletAddressQueryParamOpts,\n  type GetNativeTokenBalanceQueryParamOpts,\n  type GetTokenBalancesForWalletAddressQueryParamOpts,\n  type GetTokenHoldersV2ForTokenAddressQueryParamOpts,\n  type HistoricalBalancesResponse,\n  type PortfolioResponse,\n  type TokenBalanceNativeResponse,\n  type TokenHoldersResponse,\n} from \"../utils/types/BalanceService.types\";\nimport {\n  type Chain,\n  type GoldRushResponse,\n} from \"../utils/types/Generic.types\";\n\n/**\n * Balances APIs\n *\n */\nexport class BalanceService {\n  constructor(private execution: Execution) {}\n\n  /**\n   *\n   * Commonly used to fetch the native, fungible (ERC20), and non-fungible (ERC721 & ERC1155) tokens held by an address. Response includes spot prices and other metadata.\n   *\n   * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.\n   * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.\n   * @param {GetTokenBalancesForWalletAddressQueryParamOpts} queryParamOpts\n   *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.\n   *   - `nft`: If `true`, NFTs will be included in the response.\n   *   - `noNftFetch`: If `true`, only NFTs that have been cached will be included in the response. Helpful for faster response times.\n   *   - `noSpam`: If `true`, the suspected spam tokens are removed. Supports `eth-mainnet` and `matic-mainnet`.\n   *   - `noNftAssetMetadata`: If `true`, the response shape is limited to a list of collections and token ids, omitting metadata and asset information. Helpful for faster response times and wallets holding a large number of NFTs.\n   *\n   */\n  public async getTokenBalancesForWalletAddress(\n    chainName: Chain,\n    walletAddress: string,\n    queryParamOpts?: GetTokenBalancesForWalletAddressQueryParamOpts\n  ): Promise<GoldRushResponse<BalancesResponse>> {\n    const endpoint = endpointGenerator(\n      `${chainName}/address/${walletAddress}/balances_v2`,\n      [\n        {\n          key: \"quote-currency\",\n          value: queryParamOpts?.quoteCurrency,\n        },\n        {\n          key: \"nft\",\n          value: queryParamOpts?.nft,\n        },\n        {\n          key: \"no-nft-fetch\",\n          value: queryParamOpts?.noNftFetch,\n        },\n        {\n          key: \"no-spam\",\n          value: queryParamOpts?.noSpam,\n        },\n        {\n          key: \"no-nft-asset-metadata\",\n          value: queryParamOpts?.noNftAssetMetadata,\n        },\n      ]\n    );\n\n    const parseData = (data: GoldRushResponse<BalancesResponse>) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((balanceItem) => ({\n              ...balanceItem,\n              balance: bigIntParser(balanceItem.balance),\n              balance_24h: bigIntParser(balanceItem.balance_24h),\n              last_transferred_at: balanceItem.last_transferred_at\n                ? new Date(balanceItem.last_transferred_at)\n                : null,\n              nft_data: balanceItem.nft_data\n                ? balanceItem.nft_data.map((nftItem) => ({\n                    ...nftItem,\n                    token_id: bigIntParser(nftItem.token_id),\n                    token_balance: bigIntParser(nftItem.token_balance),\n                    token_price_wei: bigIntParser(nftItem.token_price_wei),\n                  }))\n                : null,\n            }))\n          : null;\n      }\n\n      return data;\n    };\n\n    return await this.execution.execute<BalancesResponse>(endpoint, parseData);\n  }\n\n  /**\n   *\n   * Commonly used to render a daily portfolio balance for an address broken down by the token. The timeframe is user-configurable, defaults to 30 days.\n   *\n   * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.\n   * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.\n   * @param {GetHistoricalPortfolioForWalletAddressQueryParamOpts} queryParamOpts\n   *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.\n   *   - `days`: The number of days to return data for. Defaults to 30 days.\n   *\n   */\n  public async getHistoricalPortfolioForWalletAddress(\n    chainName: Chain,\n    walletAddress: string,\n    queryParamOpts?: GetHistoricalPortfolioForWalletAddressQueryParamOpts\n  ): Promise<GoldRushResponse<PortfolioResponse>> {\n    const endpoint = endpointGenerator(\n      `${chainName}/address/${walletAddress}/portfolio_v2`,\n      [\n        {\n          key: \"quote-currency\",\n          value: queryParamOpts?.quoteCurrency,\n        },\n        {\n          key: \"days\",\n          value: queryParamOpts?.days,\n        },\n      ]\n    );\n\n    const parseData = (data: GoldRushResponse<PortfolioResponse>) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items =\n          data.data.items?.map((portfolioItem) => ({\n            ...portfolioItem,\n            holdings:\n              portfolioItem.holdings?.map((holdingItem) => ({\n                ...holdingItem,\n                timestamp:\n                  holdingItem.timestamp && data.data?.updated_at\n                    ? new Date(data.data.updated_at)\n                    : null,\n                close: {\n                  ...holdingItem.close!,\n                  balance: bigIntParser(holdingItem.close?.balance),\n                },\n                high: {\n                  ...holdingItem.high!,\n                  balance: bigIntParser(holdingItem.high?.balance),\n                },\n                low: {\n                  ...holdingItem.low!,\n                  balance: bigIntParser(holdingItem.low?.balance),\n                },\n                open: {\n                  ...holdingItem.open!,\n                  balance: bigIntParser(holdingItem.open?.balance),\n                },\n              })) || null,\n          })) || null;\n      }\n\n      return data;\n    };\n\n    return await this.execution.execute<PortfolioResponse>(endpoint, parseData);\n  }\n\n  /**\n   *\n   * Commonly used to render the transfer-in and transfer-out of a token along with historical prices from an address.\n   *\n   * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.\n   * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.\n   * @param {GetErc20TransfersForWalletAddressQueryParamOpts} queryParamOpts\n   *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.\n   *   - `contractAddress`: The requested contract address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.\n   *   - `startingBlock`: The block height to start from, defaults to `0`.\n   *   - `endingBlock`: The block height to end at, defaults to current block height.\n   *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.\n   *   - `pageNumber`: 0-indexed page number to begin pagination.\n   *\n   */\n  public async *getErc20TransfersForWalletAddress(\n    chainName: Chain,\n    walletAddress: string,\n    queryParamOpts?: GetErc20TransfersForWalletAddressQueryParamOpts\n  ): AsyncIterable<GoldRushResponse<Erc20TransfersResponse>> {\n    const endpoint = endpointGenerator(\n      `${chainName}/address/${walletAddress}/transfers_v2`,\n      [\n        {\n          key: \"quote-currency\",\n          value: queryParamOpts?.quoteCurrency,\n        },\n        {\n          key: \"contract-address\",\n          value: queryParamOpts?.contractAddress,\n        },\n        {\n          key: \"starting-block\",\n          value: queryParamOpts?.startingBlock,\n        },\n        {\n          key: \"ending-block\",\n          value: queryParamOpts?.endingBlock,\n        },\n        {\n          key: \"page-size\",\n          value: queryParamOpts?.pageSize,\n        },\n        {\n          key: \"page-number\",\n          value: queryParamOpts?.pageNumber,\n        },\n      ]\n    );\n\n    const parseData = (data: GoldRushResponse<Erc20TransfersResponse>) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((ercItem) => ({\n              ...ercItem,\n              block_signed_at: ercItem.block_signed_at\n                ? new Date(ercItem.block_signed_at)\n                : null,\n              value: bigIntParser(ercItem.value),\n              fees_paid: bigIntParser(ercItem.fees_paid),\n              transfers: ercItem.transfers\n                ? ercItem.transfers.map((transferItem) => ({\n                    ...transferItem,\n                    balance: bigIntParser(transferItem.balance),\n                    block_signed_at: transferItem.block_signed_at\n                      ? new Date(transferItem.block_signed_at)\n                      : null,\n                    delta: bigIntParser(transferItem.delta),\n                  }))\n                : null,\n            }))\n          : null;\n      }\n      return data;\n    };\n\n    for await (const data of paginateEndpoint<Erc20TransfersResponse>(\n      endpoint,\n      this.execution,\n      parseData,\n      \"pagination\"\n    )) {\n      yield data;\n    }\n  }\n\n  /**\n   *\n   * Commonly used to render the transfer-in and transfer-out of a token along with historical prices from an address.\n   *\n   * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.\n   * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.\n   * @param {GetErc20TransfersForWalletAddressQueryParamOpts} queryParamOpts\n   *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.\n   *   - `contractAddress`: The requested contract address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.\n   *   - `startingBlock`: The block height to start from, defaults to `0`.\n   *   - `endingBlock`: The block height to end at, defaults to current block height.\n   *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.\n   *   - `pageNumber`: 0-indexed page number to begin pagination.\n   *\n   */\n  public async getErc20TransfersForWalletAddressByPage(\n    chainName: Chain,\n    walletAddress: string,\n    queryParamOpts?: GetErc20TransfersForWalletAddressQueryParamOpts\n  ): Promise<GoldRushResponse<Erc20TransfersResponse>> {\n    const endpoint = endpointGenerator(\n      `${chainName}/address/${walletAddress}/transfers_v2`,\n      [\n        {\n          key: \"quote-currency\",\n          value: queryParamOpts?.quoteCurrency,\n        },\n        {\n          key: \"contract-address\",\n          value: queryParamOpts?.contractAddress,\n        },\n        {\n          key: \"starting-block\",\n          value: queryParamOpts?.startingBlock,\n        },\n        {\n          key: \"ending-block\",\n          value: queryParamOpts?.endingBlock,\n        },\n        {\n          key: \"page-size\",\n          value: queryParamOpts?.pageSize,\n        },\n        {\n          key: \"page-number\",\n          value: queryParamOpts?.pageNumber,\n        },\n      ]\n    );\n\n    const parseData = (data: GoldRushResponse<Erc20TransfersResponse>) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((blockTxItem) => ({\n              ...blockTxItem,\n              block_signed_at: blockTxItem.block_signed_at\n                ? new Date(blockTxItem.block_signed_at)\n                : null,\n              fees_paid: bigIntParser(blockTxItem.fees_paid),\n              transfers:\n                blockTxItem.transfers?.map((transferItem) => ({\n                  ...transferItem,\n                  balance: bigIntParser(transferItem.balance),\n                  block_signed_at: transferItem.block_signed_at\n                    ? new Date(transferItem.block_signed_at)\n                    : null,\n                  delta: bigIntParser(transferItem.delta),\n                })) || null,\n              value: bigIntParser(blockTxItem.value),\n            }))\n          : null;\n      }\n\n      return data;\n    };\n\n    return await this.execution.execute<Erc20TransfersResponse>(\n      endpoint,\n      parseData\n    );\n  }\n\n  /**\n   *\n   * Commonly used to get a list of all the token holders for a specified ERC20 or ERC721 token. Returns historic token holders when block-height is set (defaults to `latest`). Useful for building pie charts of token holders.\n   *\n   * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.\n   * @param {string} tokenAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.\n   * @param {GetTokenHoldersV2ForTokenAddressQueryParamOpts} queryParamOpts\n   *   - `blockHeight`: Ending block to define a block range. Omitting this parameter defaults to the latest block height.\n   *   - `pageSize`: Number of items per page. Note: Currently, only values of `100` and `1000` are supported. Omitting this parameter defaults to 100.\n   *   - `pageNumber`: 0-indexed page number to begin pagination.\n   *   - `date`: Ending date to define a block range (YYYY-MM-DD). Omitting this parameter defaults to the current date.\n   *\n   */\n  public async *getTokenHoldersV2ForTokenAddress(\n    chainName: Chain,\n    tokenAddress: string,\n    queryParamOpts?: GetTokenHoldersV2ForTokenAddressQueryParamOpts\n  ): AsyncIterable<GoldRushResponse<TokenHoldersResponse>> {\n    const endpoint = endpointGenerator(\n      `${chainName}/tokens/${tokenAddress}/token_holders_v2`,\n      [\n        {\n          key: \"block-height\",\n          value: queryParamOpts?.blockHeight,\n        },\n        {\n          key: \"page-size\",\n          value: queryParamOpts?.pageSize,\n        },\n        {\n          key: \"page-number\",\n          value: queryParamOpts?.pageNumber,\n        },\n        {\n          key: \"date\",\n          value: queryParamOpts?.date,\n        },\n      ]\n    );\n\n    const parseData = (data: GoldRushResponse<TokenHoldersResponse>) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((tokenItem) => ({\n              ...tokenItem,\n              balance: bigIntParser(tokenItem.balance),\n              total_supply: bigIntParser(tokenItem.total_supply),\n            }))\n          : null;\n      }\n\n      return data;\n    };\n\n    for await (const data of paginateEndpoint<TokenHoldersResponse>(\n      endpoint,\n      this.execution,\n      parseData,\n      \"pagination\"\n    )) {\n      yield data;\n    }\n  }\n\n  /**\n   *\n   * Commonly used to get a list of all the token holders for a specified ERC20 or ERC721 token. Returns historic token holders when block-height is set (defaults to `latest`). Useful for building pie charts of token holders.\n   *\n   * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.\n   * @param {string} tokenAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.\n   * @param {GetTokenHoldersV2ForTokenAddressQueryParamOpts} queryParamOpts\n   *   - `blockHeight`: Ending block to define a block range. Omitting this parameter defaults to the latest block height.\n   *   - `pageSize`: Number of items per page. Note: Currently, only values of `100` and `1000` are supported. Omitting this parameter defaults to 100.\n   *   - `pageNumber`: 0-indexed page number to begin pagination.\n   *   - `date`: Ending date to define a block range (YYYY-MM-DD). Omitting this parameter defaults to the current date.\n   *\n   */\n  public async getTokenHoldersV2ForTokenAddressByPage(\n    chainName: Chain,\n    tokenAddress: string,\n    queryParamOpts?: GetTokenHoldersV2ForTokenAddressQueryParamOpts\n  ): Promise<GoldRushResponse<TokenHoldersResponse>> {\n    const endpoint = endpointGenerator(\n      `${chainName}/tokens/${tokenAddress}/token_holders_v2`,\n      [\n        {\n          key: \"block-height\",\n          value: queryParamOpts?.blockHeight,\n        },\n        {\n          key: \"page-size\",\n          value: queryParamOpts?.pageSize,\n        },\n        {\n          key: \"page-number\",\n          value: queryParamOpts?.pageNumber,\n        },\n        {\n          key: \"date\",\n          value: queryParamOpts?.date,\n        },\n      ]\n    );\n\n    const parseData = (data: GoldRushResponse<TokenHoldersResponse>) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((balanceItem) => ({\n              ...balanceItem,\n              balance: bigIntParser(balanceItem.balance),\n              total_supply: bigIntParser(balanceItem.total_supply),\n            }))\n          : null;\n      }\n\n      return data;\n    };\n\n    return await this.execution.execute<TokenHoldersResponse>(\n      endpoint,\n      parseData\n    );\n  }\n\n  /**\n   *\n   * Commonly used to fetch the historical native, fungible (ERC20), and non-fungible (ERC721 & ERC1155) tokens held by an address at a given block height or date. Response includes daily prices and other metadata.\n   *\n   * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.\n   * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.\n   * @param {GetHistoricalTokenBalancesForWalletAddressQueryParamOpts} queryParamOpts\n   *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.\n   *   - `nft`: If `true`, NFTs will be included in the response.\n   *   - `noNftFetch`: If `true`, only NFTs that have been cached will be included in the response. Helpful for faster response times.\n   *   - `noSpam`: If `true`, the suspected spam tokens are removed. Supports `eth-mainnet` and `matic-mainnet`.\n   *   - `noNftAssetMetadata`: If `true`, the response shape is limited to a list of collections and token ids, omitting metadata and asset information. Helpful for faster response times and wallets holding a large number of NFTs.\n   *   - `blockHeight`: Ending block to define a block range. Omitting this parameter defaults to the latest block height.\n   *   - `date`: Ending date to define a block range (YYYY-MM-DD). Omitting this parameter defaults to the current date.\n   *\n   */\n  public async getHistoricalTokenBalancesForWalletAddress(\n    chainName: Chain,\n    walletAddress: string,\n    queryParamOpts?: GetHistoricalTokenBalancesForWalletAddressQueryParamOpts\n  ): Promise<GoldRushResponse<HistoricalBalancesResponse>> {\n    const endpoint = endpointGenerator(\n      `${chainName}/address/${walletAddress}/historical_balances`,\n      [\n        {\n          key: \"quote-currency\",\n          value: queryParamOpts?.quoteCurrency,\n        },\n        {\n          key: \"nft\",\n          value: queryParamOpts?.nft,\n        },\n        {\n          key: \"no-nft-fetch\",\n          value: queryParamOpts?.noNftFetch,\n        },\n        {\n          key: \"no-spam\",\n          value: queryParamOpts?.noSpam,\n        },\n        {\n          key: \"no-nft-asset-metadata\",\n          value: queryParamOpts?.noNftAssetMetadata,\n        },\n        {\n          key: \"block-height\",\n          value: queryParamOpts?.blockHeight,\n        },\n        {\n          key: \"date\",\n          value: queryParamOpts?.date,\n        },\n      ]\n    );\n\n    const parseData = (data: GoldRushResponse<HistoricalBalancesResponse>) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((balanceItem) => ({\n              ...balanceItem,\n              balance: bigIntParser(balanceItem.balance),\n              last_transferred_at: balanceItem.last_transferred_at\n                ? new Date(balanceItem.last_transferred_at)\n                : null,\n              nft_data: balanceItem.nft_data\n                ? balanceItem.nft_data.map((nftItem) => ({\n                    ...nftItem,\n                    token_id: bigIntParser(nftItem.token_id),\n                    token_balance: bigIntParser(nftItem.token_balance),\n                    token_price_wei: bigIntParser(nftItem.token_price_wei),\n                  }))\n                : null,\n            }))\n          : null;\n      }\n\n      return data;\n    };\n\n    return await this.execution.execute<HistoricalBalancesResponse>(\n      endpoint,\n      parseData\n    );\n  }\n\n  /**\n   *\n   * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.\n   * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.\n   * @param {GetNativeTokenBalanceQueryParamOpts} queryParamOpts\n   *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.\n   *   - `blockHeight`: Ending block to define a block range. Omitting this parameter defaults to the latest block height.\n   *\n   */\n  public async getNativeTokenBalance(\n    chainName: Chain,\n    walletAddress: string,\n    queryParamOpts?: GetNativeTokenBalanceQueryParamOpts\n  ): Promise<GoldRushResponse<TokenBalanceNativeResponse>> {\n    const endpoint = endpointGenerator(\n      `${chainName}/address/${walletAddress}/balances_native`,\n      [\n        {\n          key: \"quote-currency\",\n          value: queryParamOpts?.quoteCurrency,\n        },\n        {\n          key: \"block-height\",\n          value: queryParamOpts?.blockHeight,\n        },\n      ]\n    );\n\n    const parseData = (data: GoldRushResponse<TokenBalanceNativeResponse>) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((balanceItem) => ({\n              ...balanceItem,\n              balance: bigIntParser(balanceItem.balance),\n            }))\n          : null;\n      }\n\n      return data;\n    };\n\n    return await this.execution.execute<TokenBalanceNativeResponse>(\n      endpoint,\n      parseData\n    );\n  }\n}\n","import { bigIntParser } from \"../utils/functions/bigIntParser\";\nimport { endpointGenerator } from \"../utils/functions/endpointGenerator\";\nimport { type Execution } from \"../utils/functions/execution\";\nimport { paginateEndpoint } from \"../utils/functions/paginateEndpoint\";\nimport {\n  type AllChainsResponse,\n  type AllChainsStatusResponse,\n  type BlockHeightsResponse,\n  type BlockResponse,\n  type ChainActivityResponse,\n  type GasPricesResponse,\n  type GetAddressActivityQueryParamOpts,\n  type GetBlockHeightsQueryParamOpts,\n  type GetGasPricesQueryParamOpts,\n  type GetLogEventsByAddressQueryParamOpts,\n  type GetLogEventsByTopicHashQueryParamOpts,\n  type GetLogsQueryParamOpts,\n  type GetLogsResponse,\n  type LogEventsByAddressResponse,\n  type LogEventsByTopicHashResponse,\n  type ResolvedAddress,\n} from \"../utils/types/BaseService.types\";\nimport {\n  type Chain,\n  type GoldRushResponse,\n} from \"../utils/types/Generic.types\";\n\n/**\n * Base API\n *\n */\nexport class BaseService {\n  constructor(private execution: Execution) {}\n\n  /**\n   *\n   * Commonly used to fetch and render a single block for a block explorer.\n   *\n   * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.\n   * @param {string} blockHeight - The block height or `latest` for the latest block available.\n   *\n   */\n  public async getBlock(\n    chainName: Chain,\n    blockHeight: string\n  ): Promise<GoldRushResponse<BlockResponse>> {\n    const endpoint = endpointGenerator(\n      `${chainName}/block_v2/${blockHeight}`,\n      []\n    );\n\n    const parseData = (data: GoldRushResponse<BlockHeightsResponse>) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((blockItem) => ({\n              ...blockItem,\n              signed_at: blockItem.signed_at\n                ? new Date(blockItem.signed_at)\n                : null,\n            }))\n          : null;\n      }\n\n      return data;\n    };\n\n    return await this.execution.execute<BlockHeightsResponse>(\n      endpoint,\n      parseData\n    );\n  }\n\n  /**\n   *\n   * Commonly used to resolve ENS, RNS and Unstoppable Domains addresses.\n   *\n   * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.\n   * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.\n   *\n   */\n  public async getResolvedAddress(\n    chainName: Chain,\n    walletAddress: string\n  ): Promise<GoldRushResponse<ResolvedAddress>> {\n    const endpoint = endpointGenerator(\n      `${chainName}/address/${walletAddress}/resolve_address`,\n      []\n    );\n\n    const parseData = (data: GoldRushResponse<ResolvedAddress>) => {\n      return data;\n    };\n\n    return await this.execution.execute<ResolvedAddress>(endpoint, parseData);\n  }\n\n  /**\n   *\n   * Commonly used to get all the block heights within a particular date range. Useful for rendering a display where you sort blocks by day.\n   *\n   * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.\n   * @param {string} startDate - The start date in YYYY-MM-DD format.\n   * @param {string} endDate - The end date in YYYY-MM-DD format.\n   * @param {GetBlockHeightsQueryParamOpts} queryParamOpts\n   *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.\n   *   - `pageNumber`: 0-indexed page number to begin pagination.\n   *\n   */\n  public async *getBlockHeights(\n    chainName: Chain,\n    startDate: string,\n    endDate: string,\n    queryParamOpts?: GetBlockHeightsQueryParamOpts\n  ): AsyncIterable<GoldRushResponse<BlockHeightsResponse>> {\n    const endpoint = endpointGenerator(\n      `${chainName}/block_v2/${startDate}/${endDate}`,\n      [\n        {\n          key: \"page-size\",\n          value: queryParamOpts?.pageSize,\n        },\n        {\n          key: \"page-number\",\n          value: queryParamOpts?.pageNumber,\n        },\n      ]\n    );\n\n    const parseData = (data: GoldRushResponse<BlockHeightsResponse>) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((blockItem) => ({\n              ...blockItem,\n              signed_at: blockItem.signed_at\n                ? new Date(blockItem.signed_at)\n                : null,\n            }))\n          : null;\n      }\n\n      return data;\n    };\n\n    for await (const data of paginateEndpoint<BlockHeightsResponse>(\n      endpoint,\n      this.execution,\n      parseData,\n      \"pagination\"\n    )) {\n      yield data;\n    }\n  }\n\n  /**\n   *\n   * Commonly used to get all the block heights within a particular date range. Useful for rendering a display where you sort blocks by day.\n   *\n   * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.\n   * @param {string} startDate - The start date in YYYY-MM-DD format.\n   * @param {string} endDate - The end date in YYYY-MM-DD format.\n   * @param {GetBlockHeightsQueryParamOpts} queryParamOpts\n   *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.\n   *   - `pageNumber`: 0-indexed page number to begin pagination.\n   *\n   */\n  public async getBlockHeightsByPage(\n    chainName: Chain,\n    startDate: string,\n    endDate: string,\n    queryParamOpts?: GetBlockHeightsQueryParamOpts\n  ): Promise<GoldRushResponse<BlockHeightsResponse>> {\n    const endpoint = endpointGenerator(\n      `${chainName}/block_v2/${startDate}/${endDate}`,\n      [\n        {\n          key: \"page-size\",\n          value: queryParamOpts?.pageSize,\n        },\n        {\n          key: \"page-number\",\n          value: queryParamOpts?.pageNumber,\n        },\n      ]\n    );\n\n    const parseData = (data: GoldRushResponse<BlockHeightsResponse>) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((blockItem) => ({\n              ...blockItem,\n              signed_at: blockItem.signed_at\n                ? new Date(blockItem.signed_at)\n                : null,\n            }))\n          : null;\n      }\n\n      return data;\n    };\n\n    return await this.execution.execute<BlockHeightsResponse>(\n      endpoint,\n      parseData\n    );\n  }\n\n  /**\n   *\n   * Commonly used to get all the event logs of the latest block, or for a range of blocks. Includes sender contract metadata as well as decoded logs.\n   *\n   * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.\n   * @param {GetLogsQueryParamOpts} queryParamOpts\n   *   - `startingBlock`: The first block to retrieve log events with. Accepts decimals, hexadecimals, or the strings `earliest` and `latest`.\n   *   - `endingBlock`: The last block to retrieve log events with. Accepts decimals, hexadecimals, or the strings `earliest` and `latest`.\n   *   - `address`: The address of the log events sender contract.\n   *   - `topics`: The topic hash(es) to retrieve logs with.\n   *   - `blockHash`: The block hash to retrieve logs for.\n   *   - `skipDecode`: Omit decoded log events.\n   *\n   */\n  public async getLogs(\n    chainName: Chain,\n    queryParamOpts?: GetLogsQueryParamOpts\n  ): Promise<GoldRushResponse<GetLogsResponse>> {\n    const endpoint = endpointGenerator(`${chainName}/events`, [\n      {\n        key: \"starting-block\",\n        value: queryParamOpts?.startingBlock,\n      },\n      {\n        key: \"ending-block\",\n        value: queryParamOpts?.endingBlock,\n      },\n      {\n        key: \"address\",\n        value: queryParamOpts?.address,\n      },\n      {\n        key: \"topics\",\n        value: queryParamOpts?.topics,\n      },\n      {\n        key: \"block-hash\",\n        value: queryParamOpts?.blockHash,\n      },\n      {\n        key: \"skip-decode\",\n        value: queryParamOpts?.skipDecode,\n      },\n    ]);\n\n    const parseData = (data: GoldRushResponse<GetLogsResponse>) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((logItem) => ({\n              ...logItem,\n              block_signed_at: logItem.block_signed_at\n                ? new Date(logItem.block_signed_at)\n                : null,\n            }))\n          : null;\n      }\n\n      return data;\n    };\n\n    return await this.execution.execute<GetLogsResponse>(endpoint, parseData);\n  }\n\n  /**\n   *\n   * Commonly used to get all the event logs emitted from a particular contract address. Useful for building dashboards that examine on-chain interactions.\n   *\n   * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.\n   * @param {string} contractAddress - The requested contract address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.\n   * @param {GetLogEventsByAddressQueryParamOpts} queryParamOpts\n   *   - `startingBlock`: The first block to retrieve log events with. Accepts decimals, hexadecimals, or the strings `earliest` and `latest`.\n   *   - `endingBlock`: The last block to retrieve log events with. Accepts decimals, hexadecimals, or the strings `earliest` and `latest`.\n   *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.\n   *   - `pageNumber`: 0-indexed page number to begin pagination.\n   *\n   */\n  public async *getLogEventsByAddress(\n    chainName: Chain,\n    contractAddress: string,\n    queryParamOpts?: GetLogEventsByAddressQueryParamOpts\n  ): AsyncIterable<GoldRushResponse<LogEventsByAddressResponse>> {\n    const endpoint = endpointGenerator(\n      `${chainName}/events/address/${contractAddress}`,\n      [\n        {\n          key: \"starting-block\",\n          value: queryParamOpts?.startingBlock,\n        },\n        {\n          key: \"ending-block\",\n          value: queryParamOpts?.endingBlock,\n        },\n        {\n          key: \"page-size\",\n          value: queryParamOpts?.pageSize,\n        },\n        {\n          key: \"page-number\",\n          value: queryParamOpts?.pageNumber,\n        },\n      ]\n    );\n\n    const parseData = (data: GoldRushResponse<LogEventsByAddressResponse>) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((logItem) => ({\n              ...logItem,\n              block_signed_at: logItem.block_signed_at\n                ? new Date(logItem.block_signed_at)\n                : null,\n            }))\n          : null;\n      }\n\n      return data;\n    };\n\n    for await (const data of paginateEndpoint<LogEventsByAddressResponse>(\n      endpoint,\n      this.execution,\n      parseData,\n      \"pagination\"\n    )) {\n      yield data;\n    }\n  }\n\n  /**\n   *\n   * Commonly used to get all the event logs emitted from a particular contract address. Useful for building dashboards that examine on-chain interactions.\n   *\n   * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.\n   * @param {string} contractAddress - The requested contract address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.\n   * @param {GetLogEventsByAddressQueryParamOpts} queryParamOpts\n   *   - `startingBlock`: The first block to retrieve log events with. Accepts decimals, hexadecimals, or the strings `earliest` and `latest`.\n   *   - `endingBlock`: The last block to retrieve log events with. Accepts decimals, hexadecimals, or the strings `earliest` and `latest`.\n   *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.\n   *   - `pageNumber`: 0-indexed page number to begin pagination.\n   *\n   */\n  public async getLogEventsByAddressByPage(\n    chainName: Chain,\n    contractAddress: string,\n    queryParamOpts?: GetLogEventsByAddressQueryParamOpts\n  ): Promise<GoldRushResponse<LogEventsByAddressResponse>> {\n    const endpoint = endpointGenerator(\n      `${chainName}/events/address/${contractAddress}`,\n      [\n        {\n          key: \"starting-block\",\n          value: queryParamOpts?.startingBlock,\n        },\n        {\n          key: \"ending-block\",\n          value: queryParamOpts?.endingBlock,\n        },\n        {\n          key: \"page-size\",\n          value: queryParamOpts?.pageSize,\n        },\n        {\n          key: \"page-number\",\n          value: queryParamOpts?.pageNumber,\n        },\n      ]\n    );\n\n    const parseData = (data: GoldRushResponse<LogEventsByAddressResponse>) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((logItem) => ({\n              ...logItem,\n              block_signed_at: logItem.block_signed_at\n                ? new Date(logItem.block_signed_at)\n                : null,\n            }))\n          : null;\n      }\n\n      return data;\n    };\n\n    return await this.execution.execute<LogEventsByAddressResponse>(\n      endpoint,\n      parseData\n    );\n  }\n\n  /**\n   *\n   * Commonly used to get all event logs of the same topic hash across all contracts within a particular chain. Useful for cross-sectional analysis of event logs that are emitted on-chain.\n   *\n   * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.\n   * @param {string} topicHash - The endpoint will return event logs that contain this topic hash.\n   * @param {GetLogEventsByTopicHashQueryParamOpts} queryParamOpts\n   *   - `startingBlock`: The first block to retrieve log events with. Accepts decimals, hexadecimals, or the strings `earliest` and `latest`.\n   *   - `endingBlock`: The last block to retrieve log events with. Accepts decimals, hexadecimals, or the strings `earliest` and `latest`.\n   *   - `secondaryTopics`: Additional topic hash(es) to filter on - padded & unpadded address fields are supported. Separate multiple topics with a comma.\n   *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.\n   *   - `pageNumber`: 0-indexed page number to begin pagination.\n   *\n   */\n  public async *getLogEventsByTopicHash(\n    chainName: Chain,\n    topicHash: string,\n    queryParamOpts?: GetLogEventsByTopicHashQueryParamOpts\n  ): AsyncIterable<GoldRushResponse<LogEventsByTopicHashResponse>> {\n    const endpoint = endpointGenerator(\n      `${chainName}/events/topics/${topicHash}`,\n      [\n        {\n          key: \"starting-block\",\n          value: queryParamOpts?.startingBlock,\n        },\n        {\n          key: \"ending-block\",\n          value: queryParamOpts?.endingBlock,\n        },\n        {\n          key: \"secondary-topics\",\n          value: queryParamOpts?.secondaryTopics,\n        },\n        {\n          key: \"page-size\",\n          value: queryParamOpts?.pageSize,\n        },\n        {\n          key: \"page-number\",\n          value: queryParamOpts?.pageNumber,\n        },\n      ]\n    );\n\n    const parseData = (\n      data: GoldRushResponse<LogEventsByTopicHashResponse>\n    ) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((logItem) => ({\n              ...logItem,\n              block_signed_at: logItem.block_signed_at\n                ? new Date(logItem.block_signed_at)\n                : null,\n            }))\n          : null;\n      }\n\n      return data;\n    };\n\n    for await (const data of paginateEndpoint<LogEventsByTopicHashResponse>(\n      endpoint,\n      this.execution,\n      parseData,\n      \"pagination\"\n    )) {\n      yield data;\n    }\n  }\n\n  /**\n   *\n   * Commonly used to get all event logs of the same topic hash across all contracts within a particular chain. Useful for cross-sectional analysis of event logs that are emitted on-chain.\n   *\n   * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.\n   * @param {string} topicHash - The endpoint will return event logs that contain this topic hash.\n   * @param {GetLogEventsByTopicHashQueryParamOpts} queryParamOpts\n   *   - `startingBlock`: The first block to retrieve log events with. Accepts decimals, hexadecimals, or the strings `earliest` and `latest`.\n   *   - `endingBlock`: The last block to retrieve log events with. Accepts decimals, hexadecimals, or the strings `earliest` and `latest`.\n   *   - `secondaryTopics`: Additional topic hash(es) to filter on - padded & unpadded address fields are supported. Separate multiple topics with a comma.\n   *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.\n   *   - `pageNumber`: 0-indexed page number to begin pagination.\n   *\n   */\n  public async getLogEventsByTopicHashByPage(\n    chainName: Chain,\n    topicHash: string,\n    queryParamOpts?: GetLogEventsByTopicHashQueryParamOpts\n  ): Promise<GoldRushResponse<LogEventsByTopicHashResponse>> {\n    const endpoint = endpointGenerator(\n      `${chainName}/events/topics/${topicHash}`,\n      [\n        {\n          key: \"starting-block\",\n          value: queryParamOpts?.startingBlock,\n        },\n        {\n          key: \"ending-block\",\n          value: queryParamOpts?.endingBlock,\n        },\n        {\n          key: \"secondary-topics\",\n          value: queryParamOpts?.secondaryTopics,\n        },\n        {\n          key: \"page-size\",\n          value: queryParamOpts?.pageSize,\n        },\n        {\n          key: \"page-number\",\n          value: queryParamOpts?.pageNumber,\n        },\n      ]\n    );\n\n    const parseData = (\n      data: GoldRushResponse<LogEventsByTopicHashResponse>\n    ) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((logItem) => ({\n              ...logItem,\n              block_signed_at: logItem.block_signed_at\n                ? new Date(logItem.block_signed_at)\n                : null,\n            }))\n          : null;\n      }\n\n      return data;\n    };\n\n    return await this.execution.execute<LogEventsByTopicHashResponse>(\n      endpoint,\n      parseData\n    );\n  }\n\n  /**\n   *\n   * Commonly used to build internal dashboards for all supported chains on Covalent.\n   *\n   *\n   */\n  public async getAllChains(): Promise<GoldRushResponse<AllChainsResponse>> {\n    const endpoint = endpointGenerator(`chains`);\n\n    const parseData = (data: GoldRushResponse<AllChainsResponse>) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((chainItem) => ({\n              ...chainItem,\n              chain_id: chainItem.chain_id ? +chainItem.chain_id : null,\n            }))\n          : null;\n      }\n\n      return data;\n    };\n\n    return await this.execution.execute<AllChainsResponse>(endpoint, parseData);\n  }\n\n  /**\n   *\n   * Commonly used to build internal status dashboards of all supported chains.\n   *\n   *\n   */\n  public async getAllChainStatus(): Promise<\n    GoldRushResponse<AllChainsStatusResponse>\n  > {\n    const endpoint = endpointGenerator(`chains/status`);\n\n    const parseData = (data: GoldRushResponse<AllChainsStatusResponse>) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((chainItem) => ({\n              ...chainItem,\n              chain_id: chainItem.chain_id ? +chainItem.chain_id : null,\n            }))\n          : null;\n      }\n\n      return data;\n    };\n\n    return await this.execution.execute<AllChainsStatusResponse>(\n      endpoint,\n      parseData\n    );\n  }\n\n  /**\n   *\n   * Commonly used to locate chains which an address is active on with a single API call.\n   *\n   * @param {string} walletAddress - The requested wallet address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.\n   * @param {GetAddressActivityQueryParamOpts} queryParamOpts\n   *   - `testnets`: Set to true to include testnets with activity in the response. By default, it's set to `false` and only returns mainnet activity.\n   *\n   */\n  public async getAddressActivity(\n    walletAddress: string,\n    queryParamOpts?: GetAddressActivityQueryParamOpts\n  ): Promise<GoldRushResponse<ChainActivityResponse>> {\n    const endpoint = endpointGenerator(`address/${walletAddress}/activity`, [\n      {\n        key: \"testnets\",\n        value: queryParamOpts?.testnets,\n      },\n    ]);\n\n    const parseData = (data: GoldRushResponse<ChainActivityResponse>) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((activityItem) => ({\n              ...activityItem,\n              last_seen_at: activityItem.last_seen_at\n                ? new Date(activityItem.last_seen_at)\n                : null,\n            }))\n          : null;\n      }\n\n      return data;\n    };\n\n    return await this.execution.execute<ChainActivityResponse>(\n      endpoint,\n      parseData\n    );\n  }\n\n  /**\n   *\n   * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.\n   * @param {string} eventType - The desired event type to retrieve gas prices for. Supports `erc20` transfer events, `uniswapv3` swap events and `nativetokens` transfers.\n   * @param {GetGasPricesQueryParamOpts} queryParamOpts\n   *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.\n   *\n   */\n  public async getGasPrices(\n    chainName: Chain,\n    eventType: \"erc20\" | \"nativetokens\" | \"uniswapv3\",\n    queryParamOpts?: GetGasPricesQueryParamOpts\n  ): Promise<GoldRushResponse<GasPricesResponse>> {\n    const endpoint = endpointGenerator(\n      `${chainName}/event/${eventType}/gas_prices`,\n      [\n        {\n          key: \"quote-currency\",\n          value: queryParamOpts?.quoteCurrency,\n        },\n      ]\n    );\n\n    const parseData = (data: GoldRushResponse<GasPricesResponse>) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.base_fee = bigIntParser(data.data.base_fee);\n      }\n\n      return data;\n    };\n\n    return await this.execution.execute<GasPricesResponse>(endpoint, parseData);\n  }\n}\n","import { bigIntParser } from \"../utils/functions/bigIntParser\";\nimport { endpointGenerator } from \"../utils/functions/endpointGenerator\";\nimport { type Execution } from \"../utils/functions/execution\";\nimport { paginateEndpoint } from \"../utils/functions/paginateEndpoint\";\nimport {\n  type Chain,\n  type GoldRushResponse,\n} from \"../utils/types/Generic.types\";\nimport {\n  type ChainCollectionResponse,\n  type CheckOwnershipInNftQueryParamOpts,\n  type GetChainCollectionsQueryParamOpts,\n  type GetNftMetadataForGivenTokenIdForContractQueryParamOpts,\n  type GetNftTransactionsForContractTokenIdQueryParamOpts,\n  type GetNftsForAddressQueryParamOpts,\n  type GetTokenIdsForContractWithMetadataQueryParamOpts,\n  type NftAddressBalanceNftResponse,\n  type NftCollectionAttributesForTraitResponse,\n  type NftCollectionTraitsResponse,\n  type NftCollectionTraitsSummaryResponse,\n  type NftMetadataResponse,\n  type NftOwnershipForCollectionResponse,\n  type NftTransactionsResponse,\n} from \"../utils/types/NftService.types\";\n\n/**\n * NFTs API\n *\n */\nexport class NftService {\n  constructor(private execution: Execution) {}\n\n  /**\n   *\n   * Commonly used to fetch the list of NFT collections with downloaded and cached off chain data like token metadata and asset files.\n   *\n   * @param {string} chainName - The chain name eg: `eth-mainnet`.\n   * @param {GetChainCollectionsQueryParamOpts} queryParamOpts\n   *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.\n   *   - `pageNumber`: 0-indexed page number to begin pagination.\n   *   - `noSpam`: If `true`, the suspected spam tokens are removed. Supports `eth-mainnet` and `matic-mainnet`.\n   *\n   */\n  public async *getChainCollections(\n    chainName: Chain,\n    queryParamOpts?: GetChainCollectionsQueryParamOpts\n  ): AsyncIterable<GoldRushResponse<ChainCollectionResponse>> {\n    const endpoint = endpointGenerator(`${chainName}/nft/collections`, [\n      {\n        key: \"page-size\",\n        value: queryParamOpts?.pageSize,\n      },\n      {\n        key: \"page-number\",\n        value: queryParamOpts?.pageNumber,\n      },\n      {\n        key: \"no-spam\",\n        value: queryParamOpts?.noSpam,\n      },\n    ]);\n\n    const parseData = (data: GoldRushResponse<ChainCollectionResponse>) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((collectionItem) => ({\n              ...collectionItem,\n              last_scraped_at: collectionItem.last_scraped_at\n                ? new Date(collectionItem.last_scraped_at)\n                : null,\n            }))\n          : null;\n      }\n\n      return data;\n    };\n\n    for await (const data of paginateEndpoint<ChainCollectionResponse>(\n      endpoint,\n      this.execution,\n      parseData,\n      \"pagination\"\n    )) {\n      yield data;\n    }\n  }\n\n  /**\n   *\n   * Commonly used to fetch the list of NFT collections with downloaded and cached off chain data like token metadata and asset files.\n   *\n   * @param {string} chainName - The chain name eg: `eth-mainnet`.\n   * @param {GetChainCollectionsQueryParamOpts} queryParamOpts\n   *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.\n   *   - `pageNumber`: 0-indexed page number to begin pagination.\n   *   - `noSpam`: If `true`, the suspected spam tokens are removed. Supports `eth-mainnet` and `matic-mainnet`.\n   *\n   */\n  public async getChainCollectionsByPage(\n    chainName: Chain,\n    queryParamOpts?: GetChainCollectionsQueryParamOpts\n  ): Promise<GoldRushResponse<ChainCollectionResponse>> {\n    const endpoint = endpointGenerator(`${chainName}/nft/collections`, [\n      {\n        key: \"page-size\",\n        value: queryParamOpts?.pageSize,\n      },\n      {\n        key: \"page-number\",\n        value: queryParamOpts?.pageNumber,\n      },\n      {\n        key: \"no-spam\",\n        value: queryParamOpts?.noSpam,\n      },\n    ]);\n\n    const parseData = (data: GoldRushResponse<ChainCollectionResponse>) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((collectionItem) => ({\n              ...collectionItem,\n              last_scraped_at: collectionItem.last_scraped_at\n                ? new Date(collectionItem.last_scraped_at)\n                : null,\n            }))\n          : null;\n      }\n\n      return data;\n    };\n\n    return await this.execution.execute<ChainCollectionResponse>(\n      endpoint,\n      parseData\n    );\n  }\n\n  /**\n   *\n   * Commonly used to render the NFTs (including ERC721 and ERC1155) held by an address.\n   *\n   * @param {string} chainName - The chain name eg: `eth-mainnet`.\n   * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.\n   * @param {GetNftsForAddressQueryParamOpts} queryParamOpts\n   *   - `noSpam`: If `true`, the suspected spam tokens are removed. Supports `eth-mainnet` and `matic-mainnet`.\n   *   - `noNftAssetMetadata`: If `true`, the response shape is limited to a list of collections and token ids, omitting metadata and asset information. Helpful for faster response times and wallets holding a large number of NFTs.\n   *   - `withUncached`: By default, this endpoint only works on chains where we've cached the assets and the metadata. When set to `true`, the API will fetch metadata from upstream servers even if it's not cached - the downside being that the upstream server can block or rate limit the call and therefore resulting in time outs or slow response times on the Covalent side.\n   *\n   */\n  public async getNftsForAddress(\n    chainName: Chain,\n    walletAddress: string,\n    queryParamOpts?: GetNftsForAddressQueryParamOpts\n  ): Promise<GoldRushResponse<NftAddressBalanceNftResponse>> {\n    const endpoint = endpointGenerator(\n      `${chainName}/address/${walletAddress}/balances_nft`,\n      [\n        {\n          key: \"no-spam\",\n          value: queryParamOpts?.noSpam,\n        },\n        {\n          key: \"no-nft-asset-metadata\",\n          value: queryParamOpts?.noNftAssetMetadata,\n        },\n        {\n          key: \"with-uncached\",\n          value: queryParamOpts?.withUncached,\n        },\n      ]\n    );\n\n    const parseData = (\n      data: GoldRushResponse<NftAddressBalanceNftResponse>\n    ) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((balanceItem) => ({\n              ...balanceItem,\n              balance: bigIntParser(balanceItem.balance),\n              balance_24h: bigIntParser(balanceItem.balance_24h),\n              nft_data: balanceItem.nft_data\n                ? balanceItem.nft_data.map((nftItem) => ({\n                    ...nftItem,\n                    token_id: bigIntParser(nftItem.token_id),\n                  }))\n                : null,\n            }))\n          : null;\n      }\n\n      return data;\n    };\n\n    return await this.execution.execute<NftAddressBalanceNftResponse>(\n      endpoint,\n      parseData\n    );\n  }\n\n  /**\n   *\n   * Commonly used to get NFT token IDs with metadata from a collection. Useful for building NFT card displays.\n   *\n   * @param {string} chainName - The chain name eg: `eth-mainnet`.\n   * @param {string} contractAddress - The requested contract address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.\n   * @param {GetTokenIdsForContractWithMetadataQueryParamOpts} queryParamOpts\n   *   - `noMetadata`: Omit metadata.\n   *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.\n   *   - `pageNumber`: 0-indexed page number to begin pagination.\n   *   - `traitsFilter`: Filters NFTs based on a specific trait. If this filter is used, the API will return all NFTs with the specified trait. Accepts comma-separated values, is case-sensitive, and requires proper URL encoding.\n   *   - `valuesFilter`: Filters NFTs based on a specific trait value. If this filter is used, the API will return all NFTs with the specified trait value. If used with \"traits-filter\", only NFTs matching both filters will be returned. Accepts comma-separated values, is case-sensitive, and requires proper URL encoding.\n   *   - `withUncached`: By default, this endpoint only works on chains where we've cached the assets and the metadata. When set to `true`, the API will fetch metadata from upstream servers even if it's not cached - the downside being that the upstream server can block or rate limit the call and therefore resulting in time outs or slow response times on the Covalent side.\n   *\n   */\n  public async *getTokenIdsForContractWithMetadata(\n    chainName: Chain,\n    contractAddress: string,\n    queryParamOpts?: GetTokenIdsForContractWithMetadataQueryParamOpts\n  ): AsyncIterable<GoldRushResponse<NftMetadataResponse>> {\n    const endpoint = endpointGenerator(\n      `${chainName}/nft/${contractAddress}/metadata`,\n      [\n        {\n          key: \"no-metadata\",\n          value: queryParamOpts?.noMetadata,\n        },\n        {\n          key: \"page-size\",\n          value: queryParamOpts?.pageSize,\n        },\n        {\n          key: \"page-number\",\n          value: queryParamOpts?.pageNumber,\n        },\n        {\n          key: \"traits-filter\",\n          value: queryParamOpts?.traitsFilter,\n        },\n        {\n          key: \"values-filter\",\n          value: queryParamOpts?.valuesFilter,\n        },\n        {\n          key: \"with-uncached\",\n          value: queryParamOpts?.withUncached,\n        },\n      ]\n    );\n\n    const parseData = (data: GoldRushResponse<NftMetadataResponse>) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((tokenItem) => ({\n              ...tokenItem,\n              nft_data: {\n                ...tokenItem.nft_data!,\n                token_id: bigIntParser(tokenItem.nft_data?.token_id),\n              },\n            }))\n          : null;\n      }\n\n      return data;\n    };\n\n    for await (const data of paginateEndpoint<NftMetadataResponse>(\n      endpoint,\n      this.execution,\n      parseData,\n      \"pagination\"\n    )) {\n      yield data;\n    }\n  }\n\n  /**\n   *\n   * Commonly used to get NFT token IDs with metadata from a collection. Useful for building NFT card displays.\n   *\n   * @param {string} chainName - The chain name eg: `eth-mainnet`.\n   * @param {string} contractAddress - The requested contract address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.\n   * @param {GetTokenIdsForContractWithMetadataQueryParamOpts} queryParamOpts\n   *   - `noMetadata`: Omit metadata.\n   *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.\n   *   - `pageNumber`: 0-indexed page number to begin pagination.\n   *   - `traitsFilter`: Filters NFTs based on a specific trait. If this filter is used, the API will return all NFTs with the specified trait. Accepts comma-separated values, is case-sensitive, and requires proper URL encoding.\n   *   - `valuesFilter`: Filters NFTs based on a specific trait value. If this filter is used, the API will return all NFTs with the specified trait value. If used with \"traits-filter\", only NFTs matching both filters will be returned. Accepts comma-separated values, is case-sensitive, and requires proper URL encoding.\n   *   - `withUncached`: By default, this endpoint only works on chains where we've cached the assets and the metadata. When set to `true`, the API will fetch metadata from upstream servers even if it's not cached - the downside being that the upstream server can block or rate limit the call and therefore resulting in time outs or slow response times on the Covalent side.\n   *\n   */\n  public async getTokenIdsForContractWithMetadataByPage(\n    chainName: Chain,\n    contractAddress: string,\n    queryParamOpts?: GetTokenIdsForContractWithMetadataQueryParamOpts\n  ): Promise<GoldRushResponse<NftMetadataResponse>> {\n    const endpoint = endpointGenerator(\n      `${chainName}/nft/${contractAddress}/metadata`,\n      [\n        {\n          key: \"no-metadata\",\n          value: queryParamOpts?.noMetadata,\n        },\n        {\n          key: \"page-size\",\n          value: queryParamOpts?.pageSize,\n        },\n        {\n          key: \"page-number\",\n          value: queryParamOpts?.pageNumber,\n        },\n        {\n          key: \"traits-filter\",\n          value: queryParamOpts?.traitsFilter,\n        },\n        {\n          key: \"values-filter\",\n          value: queryParamOpts?.valuesFilter,\n        },\n        {\n          key: \"with-uncached\",\n          value: queryParamOpts?.withUncached,\n        },\n      ]\n    );\n\n    const parseData = (data: GoldRushResponse<NftMetadataResponse>) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((tokenItem) => ({\n              ...tokenItem,\n              nft_data: {\n                ...tokenItem.nft_data!,\n                token_id: bigIntParser(tokenItem.nft_data?.token_id),\n              },\n            }))\n          : null;\n      }\n\n      return data;\n    };\n\n    return await this.execution.execute<NftMetadataResponse>(\n      endpoint,\n      parseData\n    );\n  }\n\n  /**\n   *\n   * Commonly used to get a single NFT metadata by token ID from a collection. Useful for building NFT card displays.\n   *\n   * @param {string} chainName - The chain name eg: `eth-mainnet`.\n   * @param {string} contractAddress - The requested contract address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.\n   * @param {string} tokenId - The requested token ID.\n   * @param {GetNftMetadataForGivenTokenIdForContractQueryParamOpts} queryParamOpts\n   *   - `noMetadata`: Omit metadata.\n   *   - `withUncached`: By default, this endpoint only works on chains where we've cached the assets and the metadata. When set to `true`, the API will fetch metadata from upstream servers even if it's not cached - the downside being that the upstream server can block or rate limit the call and therefore resulting in time outs or slow response times on the Covalent side.\n   *\n   */\n  public async getNftMetadataForGivenTokenIdForContract(\n    chainName: Chain,\n    contractAddress: string,\n    tokenId: string,\n    queryParamOpts?: GetNftMetadataForGivenTokenIdForContractQueryParamOpts\n  ): Promise<GoldRushResponse<NftMetadataResponse>> {\n    const endpoint = endpointGenerator(\n      `${chainName}/nft/${contractAddress}/metadata/${tokenId}`,\n      [\n        {\n          key: \"no-metadata\",\n          value: queryParamOpts?.noMetadata,\n        },\n        {\n          key: \"with-uncached\",\n          value: queryParamOpts?.withUncached,\n        },\n      ]\n    );\n\n    const parseData = (data: GoldRushResponse<NftMetadataResponse>) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((tokenItem) => ({\n              ...tokenItem,\n              nft_data: {\n                ...tokenItem.nft_data!,\n                token_id: bigIntParser(tokenItem.nft_data?.token_id),\n              },\n            }))\n          : null;\n      }\n\n      return data;\n    };\n\n    return await this.execution.execute<NftMetadataResponse>(\n      endpoint,\n      parseData\n    );\n  }\n\n  /**\n   *\n   * Commonly used to get all transactions of an NFT token. Useful for building a transaction history table or price chart.\n   *\n   * @param {string} chainName - The chain name eg: `eth-mainnet`.\n   * @param {string} contractAddress - The requested contract address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.\n   * @param {string} tokenId - The requested token ID.\n   * @param {GetNftTransactionsForContractTokenIdQueryParamOpts} queryParamOpts\n   *   - `noSpam`: If `true`, the suspected spam tokens are removed. Supports `eth-mainnet` and `matic-mainnet`.\n   *\n   */\n  public async getNftTransactionsForContractTokenId(\n    chainName: Chain,\n    contractAddress: string,\n    tokenId: string,\n    queryParamOpts?: GetNftTransactionsForContractTokenIdQueryParamOpts\n  ): Promise<GoldRushResponse<NftTransactionsResponse>> {\n    const endpoint = endpointGenerator(\n      `${chainName}/tokens/${contractAddress}/nft_transactions/${tokenId}`,\n      [\n        {\n          key: \"no-spam\",\n          value: queryParamOpts?.noSpam,\n        },\n      ]\n    );\n\n    const parseData = (data: GoldRushResponse<NftTransactionsResponse>) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((nftItem) => ({\n              ...nftItem,\n              nft_transactions: nftItem.nft_transactions\n                ? nftItem.nft_transactions.map((txItem) => ({\n                    ...txItem,\n                    block_signed_at: txItem.block_signed_at\n                      ? new Date(txItem.block_signed_at)\n                      : null,\n                    value: bigIntParser(txItem.value),\n                    fees_paid: bigIntParser(txItem.fees_paid),\n                    log_events: txItem.log_events\n                      ? txItem.log_events.map((logItem) => ({\n                          ...logItem,\n                          block_signed_at: logItem.block_signed_at\n                            ? new Date(logItem.block_signed_at)\n                            : null,\n                        }))\n                      : null,\n                  }))\n                : null,\n            }))\n          : null;\n      }\n\n      return data;\n    };\n\n    return await this.execution.execute<NftTransactionsResponse>(\n      endpoint,\n      parseData\n    );\n  }\n\n  /**\n   *\n   * Commonly used to fetch and render the traits of a collection as seen in rarity calculators.\n   *\n   * @param {string} chainName - The chain name eg: `eth-mainnet`.\n   * @param {string} collectionContract - The requested collection address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.\n   *\n   */\n  public async getTraitsForCollection(\n    chainName: Chain,\n    collectionContract: string\n  ): Promise<GoldRushResponse<NftCollectionTraitsResponse>> {\n    const endpoint = endpointGenerator(\n      `${chainName}/nft/${collectionContract}/traits`,\n      []\n    );\n\n    const parseData = (data: GoldRushResponse<NftCollectionTraitsResponse>) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n      }\n\n      return data;\n    };\n\n    return await this.execution.execute<NftCollectionTraitsResponse>(\n      endpoint,\n      parseData\n    );\n  }\n\n  /**\n   *\n   * Commonly used to get the count of unique values for traits within an NFT collection.\n   *\n   * @param {string} chainName - The chain name eg: `eth-mainnet`.\n   * @param {string} collectionContract - The requested collection address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.\n   * @param {string} trait - The requested trait.\n   *\n   */\n  public async getAttributesForTraitInCollection(\n    chainName: Chain,\n    collectionContract: string,\n    trait: string\n  ): Promise<GoldRushResponse<NftCollectionAttributesForTraitResponse>> {\n    const endpoint = endpointGenerator(\n      `${chainName}/nft/${collectionContract}/traits/${trait}/attributes`,\n      []\n    );\n\n    const parseData = (\n      data: GoldRushResponse<NftCollectionAttributesForTraitResponse>\n    ) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n      }\n\n      return data;\n    };\n\n    return await this.execution.execute<NftCollectionAttributesForTraitResponse>(\n      endpoint,\n      parseData\n    );\n  }\n\n  /**\n   *\n   * Commonly used to calculate rarity scores for a collection based on its traits.\n   *\n   * @param {string} chainName - The chain name eg: `eth-mainnet`.\n   * @param {string} collectionContract - The requested collection address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.\n   *\n   */\n  public async getCollectionTraitsSummary(\n    chainName: Chain,\n    collectionContract: string\n  ): Promise<GoldRushResponse<NftCollectionTraitsSummaryResponse>> {\n    const endpoint = endpointGenerator(\n      `${chainName}/nft/${collectionContract}/traits_summary`,\n      []\n    );\n\n    const parseData = (\n      data: GoldRushResponse<NftCollectionTraitsSummaryResponse>\n    ) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n      }\n\n      return data;\n    };\n\n    return await this.execution.execute<NftCollectionTraitsSummaryResponse>(\n      endpoint,\n      parseData\n    );\n  }\n\n  /**\n   *\n   * Commonly used to verify ownership of NFTs (including ERC-721 and ERC-1155) within a collection.\n   *\n   * @param {string} chainName - The chain name eg: `eth-mainnet`.\n   * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.\n   * @param {string} collectionContract - The requested collection address.\n   * @param {CheckOwnershipInNftQueryParamOpts} queryParamOpts\n   *   - `traitsFilter`: Filters NFTs based on a specific trait. If this filter is used, the API will return all NFTs with the specified trait. Must be used with \"values-filter\", is case-sensitive, and requires proper URL encoding.\n   *   - `valuesFilter`: Filters NFTs based on a specific trait value. If this filter is used, the API will return all NFTs with the specified trait value. Must be used with \"traits-filter\", is case-sensitive, and requires proper URL encoding.\n   *\n   */\n  public async checkOwnershipInNft(\n    chainName: Chain,\n    walletAddress: string,\n    collectionContract: string,\n    queryParamOpts?: CheckOwnershipInNftQueryParamOpts\n  ): Promise<GoldRushResponse<NftOwnershipForCollectionResponse>> {\n    const endpoint = endpointGenerator(\n      `${chainName}/address/${walletAddress}/collection/${collectionContract}`,\n      [\n        {\n          key: \"traits-filter\",\n          value: queryParamOpts?.traitsFilter,\n        },\n        {\n          key: \"values-filter\",\n          value: queryParamOpts?.valuesFilter,\n        },\n      ]\n    );\n\n    const parseData = (\n      data: GoldRushResponse<NftOwnershipForCollectionResponse>\n    ) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((nftItem) => ({\n              ...nftItem,\n              balance: bigIntParser(nftItem.balance),\n              balance_24h: bigIntParser(nftItem.balance_24h),\n              token_id: bigIntParser(nftItem.token_id),\n              nft_data: {\n                ...nftItem.nft_data!,\n                token_id: bigIntParser(nftItem.nft_data?.token_id),\n              },\n            }))\n          : null;\n      }\n\n      return data;\n    };\n\n    return await this.execution.execute<NftOwnershipForCollectionResponse>(\n      endpoint,\n      parseData\n    );\n  }\n\n  /**\n   *\n   * Commonly used to verify ownership of a specific token (ERC-721 or ERC-1155) within a collection.\n   *\n   * @param {string} chainName - The chain name eg: `eth-mainnet`.\n   * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.\n   * @param {string} collectionContract - The requested collection address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.\n   * @param {string} tokenId - The requested token ID.\n   *\n   */\n  public async checkOwnershipInNftForSpecificTokenId(\n    chainName: Chain,\n    walletAddress: string,\n    collectionContract: string,\n    tokenId: string\n  ): Promise<GoldRushResponse<NftOwnershipForCollectionResponse>> {\n    const endpoint = endpointGenerator(\n      `${chainName}/address/${walletAddress}/collection/${collectionContract}/token/${tokenId}`,\n      []\n    );\n\n    const parseData = (\n      data: GoldRushResponse<NftOwnershipForCollectionResponse>\n    ) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((balanceItem) => ({\n              ...balanceItem,\n              balance: bigIntParser(balanceItem.balance),\n              balance_24h: bigIntParser(balanceItem.balance_24h),\n              token_id: bigIntParser(balanceItem.token_id),\n              last_transfered_at: balanceItem.last_transfered_at\n                ? new Date(balanceItem.last_transfered_at)\n                : null,\n            }))\n          : null;\n      }\n\n      return data;\n    };\n\n    return await this.execution.execute<NftOwnershipForCollectionResponse>(\n      endpoint,\n      parseData\n    );\n  }\n}\n","import { endpointGenerator } from \"../utils/functions/endpointGenerator\";\nimport { type Execution } from \"../utils/functions/execution\";\nimport {\n  type Chain,\n  type GoldRushResponse,\n  type Quote,\n} from \"../utils/types/Generic.types\";\nimport {\n  type GetTokenPricesQueryParamOpts,\n  type TokenPricesResponse,\n} from \"../utils/types/PricingService.types\";\n\n/**\n * Pricing API\n *\n */\nexport class PricingService {\n  constructor(private execution: Execution) {}\n\n  /**\n   *\n   * Commonly used to get historic prices of a token between date ranges. Supports native tokens.\n   *\n   * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.\n   * @param {string} quoteCurrency - The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.\n   * @param {string} contractAddress - Contract address for the token. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically. Supports multiple contract addresses separated by commas.\n   * @param {GetTokenPricesQueryParamOpts} queryParamOpts\n   *   - `from`: The start day of the historical price range (YYYY-MM-DD).\n   *   - `to`: The end day of the historical price range (YYYY-MM-DD).\n   *   - `pricesAtAsc`: Sort the prices in chronological ascending order. By default, it's set to `false` and returns prices in chronological descending order.\n   *\n   */\n  public async getTokenPrices(\n    chainName: Chain,\n    quoteCurrency: Quote,\n    contractAddress: string,\n    queryParamOpts?: GetTokenPricesQueryParamOpts\n  ): Promise<GoldRushResponse<TokenPricesResponse[]>> {\n    const endpoint = endpointGenerator(\n      `pricing/historical_by_addresses_v2/${chainName}/${quoteCurrency}/${contractAddress}`,\n      [\n        {\n          key: \"from\",\n          value: queryParamOpts?.from,\n        },\n        {\n          key: \"to\",\n          value: queryParamOpts?.to,\n        },\n        {\n          key: \"prices-at-asc\",\n          value: queryParamOpts?.pricesAtAsc,\n        },\n      ]\n    );\n\n    const parseData = (data: GoldRushResponse<TokenPricesResponse[]>) => {\n      if (data.data) {\n        data.data.forEach((dataItem) => {\n          dataItem.update_at = dataItem.update_at\n            ? new Date(dataItem.update_at)\n            : null;\n          dataItem.items = dataItem.items\n            ? dataItem.items.map((priceItem) => ({\n                ...priceItem,\n                date: priceItem.date ? new Date(priceItem.date) : null,\n              }))\n            : null;\n        });\n      }\n\n      return data;\n    };\n\n    return await this.execution.execute<TokenPricesResponse[]>(\n      endpoint,\n      parseData\n    );\n  }\n}\n","import { bigIntParser } from \"../utils/functions/bigIntParser\";\nimport { endpointGenerator } from \"../utils/functions/endpointGenerator\";\nimport { type Execution } from \"../utils/functions/execution\";\nimport {\n  type Chain,\n  type GoldRushResponse,\n} from \"../utils/types/Generic.types\";\nimport {\n  type ApprovalsResponse,\n  type NftApprovalsResponse,\n} from \"../utils/types/SecurityService.types\";\n\n/**\n * Approvals API\n *\n */\nexport class SecurityService {\n  constructor(private execution: Execution) {}\n\n  /**\n   *\n   * Commonly used to get a list of approvals across all token contracts categorized by spenders for a wallet’s assets.\n   *\n   * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.\n   * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.\n   *\n   */\n  public async getApprovals(\n    chainName: Chain,\n    walletAddress: string\n  ): Promise<GoldRushResponse<ApprovalsResponse>> {\n    const endpoint = endpointGenerator(\n      `${chainName}/approvals/${walletAddress}`,\n      []\n    );\n\n    const parseData = (data: GoldRushResponse<ApprovalsResponse>) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((approvalItem) => ({\n              ...approvalItem,\n              balance: bigIntParser(approvalItem.balance),\n              spenders: approvalItem.spenders\n                ? approvalItem.spenders.map((spenderItem) => ({\n                    ...spenderItem,\n                    block_signed_at: spenderItem.block_signed_at\n                      ? new Date(spenderItem.block_signed_at)\n                      : null,\n                  }))\n                : null,\n            }))\n          : null;\n      }\n\n      return data;\n    };\n\n    return await this.execution.execute<ApprovalsResponse>(endpoint, parseData);\n  }\n\n  /**\n     *\n     * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.\n     * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.\n     \n     *\n     */\n  public async getNftApprovals(\n    chainName: Chain,\n    walletAddress: string\n  ): Promise<GoldRushResponse<NftApprovalsResponse>> {\n    const endpoint = endpointGenerator(\n      `${chainName}/nft/approvals/${walletAddress}`,\n      []\n    );\n\n    const parseData = (data: GoldRushResponse<NftApprovalsResponse>) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((approvalItem) => ({\n              ...approvalItem,\n              token_balances: approvalItem.token_balances\n                ? approvalItem.token_balances.map((balanceItem) => ({\n                    ...balanceItem,\n                    token_balance: bigIntParser(balanceItem.token_balance),\n                    token_id: bigIntParser(balanceItem.token_id),\n                  }))\n                : null,\n            }))\n          : null;\n      }\n\n      return data;\n    };\n\n    return await this.execution.execute<NftApprovalsResponse>(\n      endpoint,\n      parseData\n    );\n  }\n}\n","import { bigIntParser } from \"../utils/functions/bigIntParser\";\nimport { endpointGenerator } from \"../utils/functions/endpointGenerator\";\nimport { type Execution } from \"../utils/functions/execution\";\nimport { paginateEndpoint } from \"../utils/functions/paginateEndpoint\";\nimport {\n  type Chain,\n  type GoldRushResponse,\n} from \"../utils/types/Generic.types\";\nimport {\n  type GetAllTransactionsForAddressQueryParamOpts,\n  type GetTimeBucketTransactionsForAddressQueryParamOpts,\n  type GetTransactionQueryParamOpts,\n  type GetTransactionSummaryQueryParamOpts,\n  type GetTransactionsForAddressV3QueryParamOpts,\n  type GetTransactionsForBlockHashByPageQueryParamOpts,\n  type GetTransactionsForBlockHashQueryParamOpts,\n  type GetTransactionsForBlockQueryParamOpts,\n  type RecentTransactionsResponse,\n  type TransactionResponse,\n  type TransactionsBlockPageResponse,\n  type TransactionsBlockResponse,\n  type TransactionsResponse,\n  type TransactionsSummaryResponse,\n  type TransactionsTimeBucketResponse,\n} from \"../utils/types/TransactionService.types\";\n\n/**\n * Transactions API\n *\n */\nexport class TransactionService {\n  constructor(private execution: Execution) {}\n\n  /**\n   *\n   * Commonly used to fetch and render a single transaction including its decoded log events. Additionally return semantically decoded information for DEX trades, lending and NFT sales.\n   *\n   * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.\n   * @param {string} txHash - The transaction hash.\n   * @param {GetTransactionQueryParamOpts} queryParamOpts\n   *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.\n   *   - `noLogs`: Omit log events.\n   *   - `withSafe`: Include safe details.\n   *\n   */\n  public async getTransaction(\n    chainName: Chain,\n    txHash: string,\n    queryParamOpts?: GetTransactionQueryParamOpts\n  ): Promise<GoldRushResponse<TransactionResponse>> {\n    const endpoint = endpointGenerator(\n      `${chainName}/transaction_v2/${txHash}`,\n      [\n        {\n          key: \"quote-currency\",\n          value: queryParamOpts?.quoteCurrency,\n        },\n        {\n          key: \"no-logs\",\n          value: queryParamOpts?.noLogs,\n        },\n      ]\n    );\n\n    const parseData = (data: GoldRushResponse<TransactionResponse>) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((txItem) => ({\n              ...txItem,\n              value: bigIntParser(txItem.value),\n              fees_paid: bigIntParser(txItem.fees_paid),\n              block_signed_at: txItem.block_signed_at\n                ? new Date(txItem.block_signed_at)\n                : null,\n              log_events: txItem.log_events\n                ? txItem.log_events.map((logItem) => ({\n                    ...logItem,\n                    block_signed_at: logItem.block_signed_at\n                      ? new Date(logItem.block_signed_at)\n                      : null,\n                  }))\n                : null,\n            }))\n          : null;\n      }\n\n      return data;\n    };\n\n    return await this.execution.execute<TransactionResponse>(\n      endpoint,\n      parseData\n    );\n  }\n\n  /**\n   *\n   * Commonly used to fetch and render the most recent transactions involving an address. Frequently seen in wallet applications.\n   *\n   * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.\n   * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.\n   * @param {GetAllTransactionsForAddressQueryParamOpts} queryParamOpts\n   *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.\n   *   - `noLogs`: Omit log events.\n   *   - `blockSignedAtAsc`: Sort the transactions in ascending chronological order. By default, it's set to `false` and returns transactions in descending chronological order.\n   *   - `withSafe`: Include safe details.\n   *\n   */\n  public async *getAllTransactionsForAddress(\n    chainName: Chain,\n    walletAddress: string,\n    queryParamOpts?: GetAllTransactionsForAddressQueryParamOpts\n  ): AsyncIterable<GoldRushResponse<RecentTransactionsResponse>> {\n    const endpoint = endpointGenerator(\n      `${chainName}/address/${walletAddress}/transactions_v3`,\n      [\n        {\n          key: \"quote-currency\",\n          value: queryParamOpts?.quoteCurrency,\n        },\n        {\n          key: \"no-logs\",\n          value: queryParamOpts?.noLogs,\n        },\n        {\n          key: \"block-signed-at-asc\",\n          value: queryParamOpts?.blockSignedAtAsc,\n        },\n        {\n          key: \"with-safe\",\n          value: queryParamOpts?.withSafe,\n        },\n      ]\n    );\n\n    const parseData = (data: GoldRushResponse<RecentTransactionsResponse>) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((txItem) => ({\n              ...txItem,\n              value: bigIntParser(txItem.value),\n              fees_paid: bigIntParser(txItem.fees_paid),\n              block_signed_at: txItem.block_signed_at\n                ? new Date(txItem.block_signed_at)\n                : null,\n              log_events: txItem.log_events\n                ? txItem.log_events.map((logItem) => ({\n                    ...logItem,\n                    block_signed_at: logItem.block_signed_at\n                      ? new Date(logItem.block_signed_at)\n                      : null,\n                  }))\n                : null,\n            }))\n          : null;\n      }\n\n      return data;\n    };\n\n    for await (const data of paginateEndpoint<RecentTransactionsResponse>(\n      endpoint,\n      this.execution,\n      parseData,\n      \"links\"\n    )) {\n      yield data;\n    }\n  }\n\n  /**\n   *\n   * Commonly used to fetch and render the most recent transactions involving an address. Frequently seen in wallet applications.\n   *\n   * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.\n   * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.\n   * @param {GetAllTransactionsForAddressQueryParamOpts} queryParamOpts\n   *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.\n   *   - `noLogs`: Omit log events.\n   *   - `blockSignedAtAsc`: Sort the transactions in ascending chronological order. By default, it's set to `false` and returns transactions in descending chronological order.\n   *   - `withSafe`: Include safe details.\n   *\n   */\n  public async getAllTransactionsForAddressByPage(\n    chainName: Chain,\n    walletAddress: string,\n    queryParamOpts?: GetAllTransactionsForAddressQueryParamOpts\n  ): Promise<GoldRushResponse<RecentTransactionsResponse>> {\n    const searchParams = [\n      {\n        key: \"quote-currency\",\n        value: queryParamOpts?.quoteCurrency,\n      },\n      {\n        key: \"no-logs\",\n        value: queryParamOpts?.noLogs,\n      },\n      {\n        key: \"block-signed-at-asc\",\n        value: queryParamOpts?.blockSignedAtAsc,\n      },\n      {\n        key: \"with-safe\",\n        value: queryParamOpts?.withSafe,\n      },\n    ];\n\n    const endpoint = endpointGenerator(\n      `${chainName}/address/${walletAddress}/transactions_v3`,\n      searchParams\n    );\n\n    const parseData = (data: GoldRushResponse<RecentTransactionsResponse>) => {\n      if (data.data) {\n        data.data.prev = data.data?.links?.prev\n          ? async () =>\n              this.execution.execute<RecentTransactionsResponse>(\n                endpointGenerator(data.data?.links?.prev, searchParams),\n                parseData\n              )\n          : null;\n        data.data.next = data.data?.links?.next\n          ? async () =>\n              this.execution.execute<RecentTransactionsResponse>(\n                endpointGenerator(data.data?.links?.next, searchParams),\n                parseData\n              )\n          : null;\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((txItem) => ({\n              ...txItem,\n              value: bigIntParser(txItem.value),\n              fees_paid: bigIntParser(txItem.fees_paid),\n              block_signed_at: txItem.block_signed_at\n                ? new Date(txItem.block_signed_at)\n                : null,\n              log_events: txItem.log_events\n                ? txItem.log_events.map((logItem) => ({\n                    ...logItem,\n                    block_signed_at: logItem.block_signed_at\n                      ? new Date(logItem.block_signed_at)\n                      : null,\n                  }))\n                : null,\n            }))\n          : null;\n      }\n\n      return data;\n    };\n\n    return await this.execution.execute<RecentTransactionsResponse>(\n      endpoint,\n      parseData\n    );\n  }\n\n  /**\n   *\n   * Commonly used to fetch all transactions including their decoded log events in a block and further flag interesting wallets or transactions.\n   *\n   * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.\n   * @param {number} blockHeight - The requested block height.\n   * @param {GetTransactionsForBlockQueryParamOpts} queryParamOpts\n   *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.\n   *   - `noLogs`: Omit log events.\n   *   - `withSafe`: Include safe details.\n   *\n   */\n  public async getTransactionsForBlock(\n    chainName: Chain,\n    blockHeight: number | string,\n    queryParamOpts?: GetTransactionsForBlockQueryParamOpts\n  ): Promise<GoldRushResponse<TransactionsBlockResponse>> {\n    const endpoint = endpointGenerator(\n      `${chainName}/block/${blockHeight}/transactions_v3`,\n      [\n        {\n          key: \"quote-currency\",\n          value: queryParamOpts?.quoteCurrency,\n        },\n        {\n          key: \"no-logs\",\n          value: queryParamOpts?.noLogs,\n        },\n        {\n          key: \"with-safe\",\n          value: queryParamOpts?.withSafe,\n        },\n      ]\n    );\n\n    const parseData = (data: GoldRushResponse<TransactionsBlockResponse>) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((txItem) => ({\n              ...txItem,\n              value: bigIntParser(txItem.value),\n              fees_paid: bigIntParser(txItem.fees_paid),\n              block_signed_at: txItem.block_signed_at\n                ? new Date(txItem.block_signed_at)\n                : null,\n              log_events: txItem.log_events\n                ? txItem.log_events.map((logItem) => ({\n                    ...logItem,\n                    block_signed_at: logItem.block_signed_at\n                      ? new Date(logItem.block_signed_at)\n                      : null,\n                  }))\n                : null,\n            }))\n          : null;\n      }\n\n      return data;\n    };\n\n    return await this.execution.execute<TransactionsBlockResponse>(\n      endpoint,\n      parseData\n    );\n  }\n\n  /**\n   *\n   * Commonly used to fetch the earliest and latest transactions, and the transaction count for a wallet. Calculate the age of the wallet and the time it has been idle and quickly gain insights into their engagement with web3.\n   *\n   * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.\n   * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.\n   * @param {GetTransactionSummaryQueryParamOpts} queryParamOpts\n   *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.\n   *   - `withGas`: Include gas summary details. Additional charge of 1 credit when true. Response times may be impacted for wallets with millions of transactions.\n   *\n   */\n  public async getTransactionSummary(\n    chainName: Chain,\n    walletAddress: string,\n    queryParamOpts?: GetTransactionSummaryQueryParamOpts\n  ): Promise<GoldRushResponse<TransactionsSummaryResponse>> {\n    const endpoint = endpointGenerator(\n      `${chainName}/address/${walletAddress}/transactions_summary`,\n      [\n        {\n          key: \"quote-currency\",\n          value: queryParamOpts?.quoteCurrency,\n        },\n        {\n          key: \"with-gas\",\n          value: queryParamOpts?.withGas,\n        },\n      ]\n    );\n\n    const parseData = (data: GoldRushResponse<TransactionsSummaryResponse>) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((txsItem) => ({\n              ...txsItem,\n              earliest_transaction: {\n                ...txsItem.earliest_transaction!,\n                block_signed_at: txsItem?.earliest_transaction?.block_signed_at\n                  ? new Date(txsItem.earliest_transaction.block_signed_at)\n                  : null,\n              },\n              latest_transaction: {\n                ...txsItem.latest_transaction!,\n                block_signed_at: txsItem?.latest_transaction?.block_signed_at\n                  ? new Date(txsItem?.latest_transaction?.block_signed_at)\n                  : null,\n              },\n              // ? API vs docs non-consistent\n              // gas_summary: {\n              //   ...txsItem.gas_summary,\n              //   total_fees_paid: bigIntParser(\n              //     txsItem.gas_summary.total_fees_paid\n              //   ),\n              // },\n            }))\n          : null;\n      }\n\n      return data;\n    };\n\n    return await this.execution.execute<TransactionsSummaryResponse>(\n      endpoint,\n      parseData\n    );\n  }\n\n  /**\n   *\n   * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.\n   * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.\n   * @param {number} page - The requested page, 0-indexed.\n   * @param {GetTransactionsForAddressV3QueryParamOpts} queryParamOpts\n   *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.\n   *   - `noLogs`: Omit log events.\n   *   - `blockSignedAtAsc`: Sort the transactions in ascending chronological order. By default, it's set to `false` and returns transactions in descending chronological order.\n   *   - `withSafe`: Include safe details.\n   *\n   */\n  public async getTransactionsForAddressV3(\n    chainName: Chain,\n    walletAddress: string,\n    page: number,\n    queryParamOpts?: GetTransactionsForAddressV3QueryParamOpts\n  ): Promise<GoldRushResponse<TransactionsResponse>> {\n    const searchParams = [\n      {\n        key: \"quote-currency\",\n        value: queryParamOpts?.quoteCurrency,\n      },\n      {\n        key: \"no-logs\",\n        value: queryParamOpts?.noLogs,\n      },\n      {\n        key: \"block-signed-at-asc\",\n        value: queryParamOpts?.blockSignedAtAsc,\n      },\n      {\n        key: \"with-safe\",\n        value: queryParamOpts?.withSafe,\n      },\n    ];\n    const endpoint = endpointGenerator(\n      `${chainName}/address/${walletAddress}/transactions_v3/page/${page}`,\n      searchParams\n    );\n\n    const parseData = (data: GoldRushResponse<TransactionsResponse>) => {\n      if (data.data) {\n        data.data.prev = data.data?.links?.prev\n          ? async () =>\n              this.execution.execute<TransactionsResponse>(\n                endpointGenerator(data.data?.links?.prev, searchParams),\n                parseData\n              )\n          : null;\n        data.data.next = data.data?.links?.next\n          ? async () =>\n              this.execution.execute<TransactionsResponse>(\n                endpointGenerator(data.data?.links?.next, searchParams),\n                parseData\n              )\n          : null;\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((txItem) => ({\n              ...txItem,\n              value: bigIntParser(txItem.value),\n              fees_paid: bigIntParser(txItem.fees_paid),\n              block_signed_at: txItem.block_signed_at\n                ? new Date(txItem.block_signed_at)\n                : null,\n              log_events: txItem.log_events\n                ? txItem.log_events.map((logItem) => ({\n                    ...logItem,\n                    block_signed_at: logItem.block_signed_at\n                      ? new Date(logItem.block_signed_at)\n                      : null,\n                  }))\n                : null,\n            }))\n          : null;\n      }\n\n      return data;\n    };\n\n    return await this.execution.execute<TransactionsResponse>(\n      endpoint,\n      parseData\n    );\n  }\n\n  /**\n   *\n   * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.\n   * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.\n   * @param {number} timeBucket - The 0-indexed 15-minute time bucket. E.g. 27 Feb 2023 05:23 GMT = 1677475383 (Unix time). 1677475383/900=1863861 timeBucket.\n   * @param {GetTimeBucketTransactionsForAddressQueryParamOpts} queryParamOpts\n   *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.\n   *   - `noLogs`: Omit log events.\n   *   - `withSafe`: Include safe details.\n   *\n   */\n  public async getTimeBucketTransactionsForAddress(\n    chainName: Chain,\n    walletAddress: string,\n    timeBucket: number,\n    queryParamOpts?: GetTimeBucketTransactionsForAddressQueryParamOpts\n  ): Promise<GoldRushResponse<TransactionsTimeBucketResponse>> {\n    const searchParams = [\n      {\n        key: \"quote-currency\",\n        value: queryParamOpts?.quoteCurrency,\n      },\n      {\n        key: \"no-logs\",\n        value: queryParamOpts?.noLogs,\n      },\n      {\n        key: \"with-safe\",\n        value: queryParamOpts?.withSafe,\n      },\n    ];\n    const endpoint = endpointGenerator(\n      `${chainName}/bulk/transactions/${walletAddress}/${timeBucket}`,\n      searchParams\n    );\n\n    const parseData = (\n      data: GoldRushResponse<TransactionsTimeBucketResponse>\n    ) => {\n      if (data.data) {\n        data.data.prev = data.data?.links?.prev\n          ? async () =>\n              this.execution.execute<TransactionsTimeBucketResponse>(\n                endpointGenerator(data.data?.links?.prev, searchParams),\n                parseData\n              )\n          : null;\n        data.data.next = data.data?.links?.next\n          ? async () =>\n              this.execution.execute<TransactionsTimeBucketResponse>(\n                endpointGenerator(data.data?.links?.next, searchParams),\n                parseData\n              )\n          : null;\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((txItem) => ({\n              ...txItem,\n              value: bigIntParser(txItem.value),\n              fees_paid: bigIntParser(txItem.fees_paid),\n              block_signed_at: txItem.block_signed_at\n                ? new Date(txItem.block_signed_at)\n                : null,\n              log_events: txItem.log_events\n                ? txItem.log_events.map((logItem) => ({\n                    ...logItem,\n                    block_signed_at: logItem.block_signed_at\n                      ? new Date(logItem.block_signed_at)\n                      : null,\n                  }))\n                : null,\n            }))\n          : null;\n      }\n\n      return data;\n    };\n\n    return await this.execution.execute<TransactionsTimeBucketResponse>(\n      endpoint,\n      parseData\n    );\n  }\n\n  /**\n   *\n   * Commonly used to fetch all transactions including their decoded log events in a block and further flag interesting wallets or transactions.\n   *\n   * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.\n   * @param {string} blockHash - The requested block hash.\n   * @param {number} page - The requested 0-indexed page number.\n   * @param {GetTransactionsForBlockHashByPageQueryParamOpts} queryParamOpts\n   *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.\n   *   - `noLogs`: Omit log events.\n   *   - `withSafe`: Include safe details.\n   *\n   */\n  public async getTransactionsForBlockHashByPage(\n    chainName: Chain,\n    blockHash: string,\n    page: number,\n    queryParamOpts?: GetTransactionsForBlockHashByPageQueryParamOpts\n  ): Promise<GoldRushResponse<TransactionsBlockPageResponse>> {\n    const searchParams = [\n      {\n        key: \"quote-currency\",\n        value: queryParamOpts?.quoteCurrency,\n      },\n      {\n        key: \"no-logs\",\n        value: queryParamOpts?.noLogs,\n      },\n      {\n        key: \"with-safe\",\n        value: queryParamOpts?.withSafe,\n      },\n    ];\n    const endpoint = endpointGenerator(\n      `${chainName}/block_hash/${blockHash}/transactions_v3/page/${page}`,\n      searchParams\n    );\n\n    const parseData = (\n      data: GoldRushResponse<TransactionsBlockPageResponse>\n    ) => {\n      if (data.data) {\n        data.data.prev = data.data?.links?.prev\n          ? async () =>\n              this.execution.execute<TransactionsBlockPageResponse>(\n                endpointGenerator(data.data?.links?.prev, searchParams),\n                parseData\n              )\n          : null;\n        data.data.next = data.data?.links?.next\n          ? async () =>\n              this.execution.execute<TransactionsBlockPageResponse>(\n                endpointGenerator(data.data?.links?.next, searchParams),\n                parseData\n              )\n          : null;\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((txItem) => ({\n              ...txItem,\n              value: bigIntParser(txItem.value),\n              fees_paid: bigIntParser(txItem.fees_paid),\n              block_signed_at: txItem.block_signed_at\n                ? new Date(txItem.block_signed_at)\n                : null,\n              log_events: txItem.log_events\n                ? txItem.log_events.map((logItem) => ({\n                    ...logItem,\n                    block_signed_at: logItem.block_signed_at\n                      ? new Date(logItem.block_signed_at)\n                      : null,\n                  }))\n                : null,\n            }))\n          : null;\n      }\n\n      return data;\n    };\n\n    return await this.execution.execute<TransactionsBlockPageResponse>(\n      endpoint,\n      parseData\n    );\n  }\n\n  /**\n   *\n   * Commonly used to fetch all transactions including their decoded log events in a block and further flag interesting wallets or transactions.\n   *\n   * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.\n   * @param {string} blockHash - The requested block hash.\n   * @param {GetTransactionsForBlockHashQueryParamOpts} queryParamOpts\n   *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.\n   *   - `noLogs`: Omit log events.\n   *   - `withSafe`: Include safe details.\n   *\n   */\n  public async getTransactionsForBlockHash(\n    chainName: Chain,\n    blockHash: string,\n    queryParamOpts?: GetTransactionsForBlockHashQueryParamOpts\n  ): Promise<GoldRushResponse<TransactionsBlockResponse>> {\n    const endpoint = endpointGenerator(\n      `${chainName}/block_hash/${blockHash}/transactions_v3`,\n      [\n        {\n          key: \"quote-currency\",\n          value: queryParamOpts?.quoteCurrency,\n        },\n        {\n          key: \"no-logs\",\n          value: queryParamOpts?.noLogs,\n        },\n        {\n          key: \"with-safe\",\n          value: queryParamOpts?.withSafe,\n        },\n      ]\n    );\n\n    const parseData = (data: GoldRushResponse<TransactionsBlockResponse>) => {\n      if (data.data) {\n        data.data.updated_at = data.data.updated_at\n          ? new Date(data.data.updated_at)\n          : null;\n        data.data.items = data.data.items\n          ? data.data.items.map((txItem) => ({\n              ...txItem,\n              value: bigIntParser(txItem.value),\n              fees_paid: bigIntParser(txItem.fees_paid),\n              block_signed_at: txItem.block_signed_at\n                ? new Date(txItem.block_signed_at)\n                : null,\n              log_events: txItem.log_events\n                ? txItem.log_events.map((logItem) => ({\n                    ...logItem,\n                    block_signed_at: logItem.block_signed_at\n                      ? new Date(logItem.block_signed_at)\n                      : null,\n                  }))\n                : null,\n            }))\n          : null;\n      }\n\n      return data;\n    };\n\n    return await this.execution.execute<TransactionsBlockResponse>(\n      endpoint,\n      parseData\n    );\n  }\n}\n","import { type GoldRushClientSettings } from \"../types/Generic.types\";\n\nexport async function debugOutput(\n  settings: GoldRushClientSettings,\n  ...content: unknown[]\n) {\n  if (settings.debug) {\n    content.forEach((c) => {\n      console.info(\"[DEBUG] |\", c);\n    });\n  }\n}\n","class Node {\n\t/// value;\n\t/// next;\n\n\tconstructor(value) {\n\t\tthis.value = value;\n\n\t\t// TODO: Remove this when targeting Node.js 12.\n\t\tthis.next = undefined;\n\t}\n}\n\nclass Queue {\n\t// TODO: Use private class fields when targeting Node.js 12.\n\t// #_head;\n\t// #_tail;\n\t// #_size;\n\n\tconstructor() {\n\t\tthis.clear();\n\t}\n\n\tenqueue(value) {\n\t\tconst node = new Node(value);\n\n\t\tif (this._head) {\n\t\t\tthis._tail.next = node;\n\t\t\tthis._tail = node;\n\t\t} else {\n\t\t\tthis._head = node;\n\t\t\tthis._tail = node;\n\t\t}\n\n\t\tthis._size++;\n\t}\n\n\tdequeue() {\n\t\tconst current = this._head;\n\t\tif (!current) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._head = this._head.next;\n\t\tthis._size--;\n\t\treturn current.value;\n\t}\n\n\tclear() {\n\t\tthis._head = undefined;\n\t\tthis._tail = undefined;\n\t\tthis._size = 0;\n\t}\n\n\tget size() {\n\t\treturn this._size;\n\t}\n\n\t* [Symbol.iterator]() {\n\t\tlet current = this._head;\n\n\t\twhile (current) {\n\t\t\tyield current.value;\n\t\t\tcurrent = current.next;\n\t\t}\n\t}\n}\n\nmodule.exports = Queue;\n","'use strict';\nconst Queue = require('yocto-queue');\n\nconst pLimit = concurrency => {\n\tif (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) {\n\t\tthrow new TypeError('Expected `concurrency` to be a number from 1 and up');\n\t}\n\n\tconst queue = new Queue();\n\tlet activeCount = 0;\n\n\tconst next = () => {\n\t\tactiveCount--;\n\n\t\tif (queue.size > 0) {\n\t\t\tqueue.dequeue()();\n\t\t}\n\t};\n\n\tconst run = async (fn, resolve, ...args) => {\n\t\tactiveCount++;\n\n\t\tconst result = (async () => fn(...args))();\n\n\t\tresolve(result);\n\n\t\ttry {\n\t\t\tawait result;\n\t\t} catch {}\n\n\t\tnext();\n\t};\n\n\tconst enqueue = (fn, resolve, ...args) => {\n\t\tqueue.enqueue(run.bind(null, fn, resolve, ...args));\n\n\t\t(async () => {\n\t\t\t// This function needs to wait until the next microtask before comparing\n\t\t\t// `activeCount` to `concurrency`, because `activeCount` is updated asynchronously\n\t\t\t// when the run function is dequeued and called. The comparison in the if-statement\n\t\t\t// needs to happen asynchronously as well to get an up-to-date value for `activeCount`.\n\t\t\tawait Promise.resolve();\n\n\t\t\tif (activeCount < concurrency && queue.size > 0) {\n\t\t\t\tqueue.dequeue()();\n\t\t\t}\n\t\t})();\n\t};\n\n\tconst generator = (fn, ...args) => new Promise(resolve => {\n\t\tenqueue(fn, resolve, ...args);\n\t});\n\n\tObject.defineProperties(generator, {\n\t\tactiveCount: {\n\t\t\tget: () => activeCount\n\t\t},\n\t\tpendingCount: {\n\t\t\tget: () => queue.size\n\t\t},\n\t\tclearQueue: {\n\t\t\tvalue: () => {\n\t\t\t\tqueue.clear();\n\t\t\t}\n\t\t}\n\t});\n\n\treturn generator;\n};\n\nmodule.exports = pLimit;\n","import {\n  type GoldRushClientSettings,\n  type GoldRushResponse,\n} from \"../types/Generic.types\";\nimport { debugOutput } from \"./debugOutput\";\nimport pLimit from \"p-limit\";\n\nexport class Execution {\n  private maxRetries: number;\n  private retryDelay: number;\n  private enableRetry: boolean;\n  private processes: pLimit.Limit;\n\n  constructor(\n    private settings: GoldRushClientSettings,\n    private headers: Record<string, string>\n  ) {\n    this.processes = pLimit(this.settings.threadCount ?? 2);\n    this.maxRetries = settings.maxRetries ?? 2;\n    this.retryDelay = settings.retryDelay ?? 1500;\n    this.enableRetry = settings.enableRetry ?? true;\n  }\n\n  async execute<T>(\n    endpoint: URL,\n    parseData: (data: GoldRushResponse<T>) => GoldRushResponse<T>\n  ): Promise<GoldRushResponse<T>> {\n    let retryCount: number = 0;\n    let completed: boolean = false;\n\n    while (!completed) {\n      try {\n        const startTime: Date = new Date();\n\n        const response = await this.processes(() =>\n          fetch(endpoint, {\n            headers: this.headers,\n          })\n        );\n\n        debugOutput(\n          this.settings,\n          `Request URL: ${\n            response ? new URL(response.url) : endpoint\n          } | Response code: ${\n            response ? response.status : 429\n          } | Response time: ${(\n            new Date().getTime() - startTime.getTime()\n          ).toFixed(2)}ms`\n        );\n\n        if (response.status === null || response.status === 429) {\n          throw new Error(`Received status code: ${response.status ?? 429}`);\n        }\n\n        const data = (await response.json()) as GoldRushResponse<T>;\n\n        if (data.error) {\n          throw data;\n        }\n\n        const parsedData = parseData(data);\n        completed = true;\n\n        return {\n          data: parsedData.data as T,\n          error: false,\n          error_code: null,\n          error_message: null,\n        };\n      } catch (error: any) {\n        debugOutput(\n          this.settings,\n          `Request URL: ${endpoint} | Retry Enabled: ${this.enableRetry} | Retry Count: ${retryCount} | Max Retries: ${this.maxRetries} | Retry Delay: ${this.retryDelay}ms`,\n          error\n        );\n\n        if (\n          this.enableRetry &&\n          (error?.error_code === 429 || error?.cause?.code === 429)\n        ) {\n          if (retryCount >= this.maxRetries) {\n            completed = true;\n            return {\n              data: null,\n              error: true,\n              error_code: 429,\n              error_message: `${this.maxRetries} retries exceeded`,\n            };\n          } else {\n            retryCount++;\n            await new Promise((resolve) =>\n              setTimeout(resolve, this.retryDelay)\n            );\n            completed = false;\n          }\n        } else {\n          completed = true;\n          return {\n            data: null,\n            error: true,\n            error_code: error?.cause?.code || error?.error_code || 500,\n            error_message:\n              error?.cause?.message ||\n              error?.error_message ||\n              \"Internal server error\",\n          };\n        }\n      }\n    }\n\n    return {\n      data: null,\n      error: true,\n      error_code: 500,\n      error_message: \"Internal server error\",\n    };\n  }\n}\n","const _apiKeyV1Pattern: RegExp = /^ckey_([a-f0-9]{27})$/;\nconst _apiKeyV2Pattern: RegExp =\n  /^cqt_(wF|rQ)([bcdfghjkmpqrtvwxyBCDFGHJKMPQRTVWXY346789]{26})$/;\n\nexport const isValidApiKey = (apiKey: string): boolean => {\n  return _apiKeyV1Pattern.test(apiKey) || _apiKeyV2Pattern.test(apiKey);\n};\n","import { version } from \"../package.json\";\nimport { BalanceService } from \"./services/BalanceService\";\nimport { BaseService } from \"./services/BaseService\";\nimport { NftService } from \"./services/NftService\";\nimport { PricingService } from \"./services/PricingService\";\nimport { SecurityService } from \"./services/SecurityService\";\nimport { TransactionService } from \"./services/TransactionService\";\nimport { Execution } from \"./utils/functions/execution\";\nimport { isValidApiKey } from \"./utils/functions/isValidApiKey\";\nimport {\n  type GoldRushClientSettings,\n  type GoldRushResponse,\n} from \"./utils/types/Generic.types\";\n\n/**\n * GoldRushClient Class\n */\nexport class GoldRushClient {\n  private readonly userAgent: string = `com.covalenthq.sdk.typescript/${version}`;\n\n  public SecurityService: SecurityService;\n  public BalanceService: BalanceService;\n  public BaseService: BaseService;\n  public NftService: NftService;\n  public PricingService: PricingService;\n  public TransactionService: TransactionService;\n\n  constructor(apiKey: string, settings: GoldRushClientSettings = {}) {\n    const validKey: boolean = isValidApiKey(apiKey);\n\n    if (!validKey) {\n      throw {\n        data: null,\n        error: true,\n        error_code: 401,\n        error_message:\n          \"Invalid or missing API key (sign up at https://goldrush.dev/platform/apikey)\",\n      } as GoldRushResponse<null>;\n    }\n\n    const execution: Execution = new Execution(settings, {\n      Authorization: `Bearer ${apiKey}`,\n      \"X-Requested-With\": settings.source\n        ? `${settings.source} (${this.userAgent})`\n        : this.userAgent,\n    });\n\n    this.BalanceService = new BalanceService(execution);\n    this.BaseService = new BaseService(execution);\n    this.NftService = new NftService(execution);\n    this.PricingService = new PricingService(execution);\n    this.SecurityService = new SecurityService(execution);\n    this.TransactionService = new TransactionService(execution);\n  }\n}\n","/*\r\n *  big.js v6.2.1\r\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\r\n *  Copyright (c) 2022 Michael Mclaughlin\r\n *  https://github.com/MikeMcl/big.js/LICENCE.md\r\n */\r\n\r\n\r\n/************************************** EDITABLE DEFAULTS *****************************************/\r\n\r\n\r\n  // The default values below must be integers within the stated ranges.\r\n\r\n  /*\r\n   * The maximum number of decimal places (DP) of the results of operations involving division:\r\n   * div and sqrt, and pow with negative exponents.\r\n   */\r\nvar DP = 20,          // 0 to MAX_DP\r\n\r\n  /*\r\n   * The rounding mode (RM) used when rounding to the above decimal places.\r\n   *\r\n   *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\r\n   *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\r\n   *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\r\n   *  3  Away from zero.                                  (ROUND_UP)\r\n   */\r\n  RM = 1,             // 0, 1, 2 or 3\r\n\r\n  // The maximum value of DP and Big.DP.\r\n  MAX_DP = 1E6,       // 0 to 1000000\r\n\r\n  // The maximum magnitude of the exponent argument to the pow method.\r\n  MAX_POWER = 1E6,    // 1 to 1000000\r\n\r\n  /*\r\n   * The negative exponent (NE) at and beneath which toString returns exponential notation.\r\n   * (JavaScript numbers: -7)\r\n   * -1000000 is the minimum recommended exponent value of a Big.\r\n   */\r\n  NE = -7,            // 0 to -1000000\r\n\r\n  /*\r\n   * The positive exponent (PE) at and above which toString returns exponential notation.\r\n   * (JavaScript numbers: 21)\r\n   * 1000000 is the maximum recommended exponent value of a Big, but this limit is not enforced.\r\n   */\r\n  PE = 21,            // 0 to 1000000\r\n\r\n  /*\r\n   * When true, an error will be thrown if a primitive number is passed to the Big constructor,\r\n   * or if valueOf is called, or if toNumber is called on a Big which cannot be converted to a\r\n   * primitive number without a loss of precision.\r\n   */\r\n  STRICT = false,     // true or false\r\n\r\n\r\n/**************************************************************************************************/\r\n\r\n\r\n  // Error messages.\r\n  NAME = '[big.js] ',\r\n  INVALID = NAME + 'Invalid ',\r\n  INVALID_DP = INVALID + 'decimal places',\r\n  INVALID_RM = INVALID + 'rounding mode',\r\n  DIV_BY_ZERO = NAME + 'Division by zero',\r\n\r\n  // The shared prototype object.\r\n  P = {},\r\n  UNDEFINED = void 0,\r\n  NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\r\n\r\n\r\n/*\r\n * Create and return a Big constructor.\r\n */\r\nfunction _Big_() {\r\n\r\n  /*\r\n   * The Big constructor and exported function.\r\n   * Create and return a new instance of a Big number object.\r\n   *\r\n   * n {number|string|Big} A numeric value.\r\n   */\r\n  function Big(n) {\r\n    var x = this;\r\n\r\n    // Enable constructor usage without new.\r\n    if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);\r\n\r\n    // Duplicate.\r\n    if (n instanceof Big) {\r\n      x.s = n.s;\r\n      x.e = n.e;\r\n      x.c = n.c.slice();\r\n    } else {\r\n      if (typeof n !== 'string') {\r\n        if (Big.strict === true && typeof n !== 'bigint') {\r\n          throw TypeError(INVALID + 'value');\r\n        }\r\n\r\n        // Minus zero?\r\n        n = n === 0 && 1 / n < 0 ? '-0' : String(n);\r\n      }\r\n\r\n      parse(x, n);\r\n    }\r\n\r\n    // Retain a reference to this Big constructor.\r\n    // Shadow Big.prototype.constructor which points to Object.\r\n    x.constructor = Big;\r\n  }\r\n\r\n  Big.prototype = P;\r\n  Big.DP = DP;\r\n  Big.RM = RM;\r\n  Big.NE = NE;\r\n  Big.PE = PE;\r\n  Big.strict = STRICT;\r\n  Big.roundDown = 0;\r\n  Big.roundHalfUp = 1;\r\n  Big.roundHalfEven = 2;\r\n  Big.roundUp = 3;\r\n\r\n  return Big;\r\n}\r\n\r\n\r\n/*\r\n * Parse the number or string value passed to a Big constructor.\r\n *\r\n * x {Big} A Big number instance.\r\n * n {number|string} A numeric value.\r\n */\r\nfunction parse(x, n) {\r\n  var e, i, nl;\r\n\r\n  if (!NUMERIC.test(n)) {\r\n    throw Error(INVALID + 'number');\r\n  }\r\n\r\n  // Determine sign.\r\n  x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\r\n\r\n  // Decimal point?\r\n  if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');\r\n\r\n  // Exponential form?\r\n  if ((i = n.search(/e/i)) > 0) {\r\n\r\n    // Determine exponent.\r\n    if (e < 0) e = i;\r\n    e += +n.slice(i + 1);\r\n    n = n.substring(0, i);\r\n  } else if (e < 0) {\r\n\r\n    // Integer.\r\n    e = n.length;\r\n  }\r\n\r\n  nl = n.length;\r\n\r\n  // Determine leading zeros.\r\n  for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\r\n\r\n  if (i == nl) {\r\n\r\n    // Zero.\r\n    x.c = [x.e = 0];\r\n  } else {\r\n\r\n    // Determine trailing zeros.\r\n    for (; nl > 0 && n.charAt(--nl) == '0';);\r\n    x.e = e - i - 1;\r\n    x.c = [];\r\n\r\n    // Convert string to array of digits without leading/trailing zeros.\r\n    for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Round Big x to a maximum of sd significant digits using rounding mode rm.\r\n *\r\n * x {Big} The Big to round.\r\n * sd {number} Significant digits: integer, 0 to MAX_DP inclusive.\r\n * rm {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n * [more] {boolean} Whether the result of division was truncated.\r\n */\r\nfunction round(x, sd, rm, more) {\r\n  var xc = x.c;\r\n\r\n  if (rm === UNDEFINED) rm = x.constructor.RM;\r\n  if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) {\r\n    throw Error(INVALID_RM);\r\n  }\r\n\r\n  if (sd < 1) {\r\n    more =\r\n      rm === 3 && (more || !!xc[0]) || sd === 0 && (\r\n      rm === 1 && xc[0] >= 5 ||\r\n      rm === 2 && (xc[0] > 5 || xc[0] === 5 && (more || xc[1] !== UNDEFINED))\r\n    );\r\n\r\n    xc.length = 1;\r\n\r\n    if (more) {\r\n\r\n      // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n      x.e = x.e - sd + 1;\r\n      xc[0] = 1;\r\n    } else {\r\n\r\n      // Zero.\r\n      xc[0] = x.e = 0;\r\n    }\r\n  } else if (sd < xc.length) {\r\n\r\n    // xc[sd] is the digit after the digit that may be rounded up.\r\n    more =\r\n      rm === 1 && xc[sd] >= 5 ||\r\n      rm === 2 && (xc[sd] > 5 || xc[sd] === 5 &&\r\n        (more || xc[sd + 1] !== UNDEFINED || xc[sd - 1] & 1)) ||\r\n      rm === 3 && (more || !!xc[0]);\r\n\r\n    // Remove any digits after the required precision.\r\n    xc.length = sd;\r\n\r\n    // Round up?\r\n    if (more) {\r\n\r\n      // Rounding up may mean the previous digit has to be rounded up.\r\n      for (; ++xc[--sd] > 9;) {\r\n        xc[sd] = 0;\r\n        if (sd === 0) {\r\n          ++x.e;\r\n          xc.unshift(1);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (sd = xc.length; !xc[--sd];) xc.pop();\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Return a string representing the value of Big x in normal or exponential notation.\r\n * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\r\n */\r\nfunction stringify(x, doExponential, isNonzero) {\r\n  var e = x.e,\r\n    s = x.c.join(''),\r\n    n = s.length;\r\n\r\n  // Exponential notation?\r\n  if (doExponential) {\r\n    s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\r\n\r\n  // Normal notation.\r\n  } else if (e < 0) {\r\n    for (; ++e;) s = '0' + s;\r\n    s = '0.' + s;\r\n  } else if (e > 0) {\r\n    if (++e > n) {\r\n      for (e -= n; e--;) s += '0';\r\n    } else if (e < n) {\r\n      s = s.slice(0, e) + '.' + s.slice(e);\r\n    }\r\n  } else if (n > 1) {\r\n    s = s.charAt(0) + '.' + s.slice(1);\r\n  }\r\n\r\n  return x.s < 0 && isNonzero ? '-' + s : s;\r\n}\r\n\r\n\r\n// Prototype/instance methods\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the absolute value of this Big.\r\n */\r\nP.abs = function () {\r\n  var x = new this.constructor(this);\r\n  x.s = 1;\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return 1 if the value of this Big is greater than the value of Big y,\r\n *       -1 if the value of this Big is less than the value of Big y, or\r\n *        0 if they have the same value.\r\n */\r\nP.cmp = function (y) {\r\n  var isneg,\r\n    x = this,\r\n    xc = x.c,\r\n    yc = (y = new x.constructor(y)).c,\r\n    i = x.s,\r\n    j = y.s,\r\n    k = x.e,\r\n    l = y.e;\r\n\r\n  // Either zero?\r\n  if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;\r\n\r\n  // Signs differ?\r\n  if (i != j) return i;\r\n\r\n  isneg = i < 0;\r\n\r\n  // Compare exponents.\r\n  if (k != l) return k > l ^ isneg ? 1 : -1;\r\n\r\n  j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n  // Compare digit by digit.\r\n  for (i = -1; ++i < j;) {\r\n    if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\r\n  }\r\n\r\n  // Compare lengths.\r\n  return k == l ? 0 : k > l ^ isneg ? 1 : -1;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\r\n * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n */\r\nP.div = function (y) {\r\n  var x = this,\r\n    Big = x.constructor,\r\n    a = x.c,                  // dividend\r\n    b = (y = new Big(y)).c,   // divisor\r\n    k = x.s == y.s ? 1 : -1,\r\n    dp = Big.DP;\r\n\r\n  if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n    throw Error(INVALID_DP);\r\n  }\r\n\r\n  // Divisor is zero?\r\n  if (!b[0]) {\r\n    throw Error(DIV_BY_ZERO);\r\n  }\r\n\r\n  // Dividend is 0? Return +-0.\r\n  if (!a[0]) {\r\n    y.s = k;\r\n    y.c = [y.e = 0];\r\n    return y;\r\n  }\r\n\r\n  var bl, bt, n, cmp, ri,\r\n    bz = b.slice(),\r\n    ai = bl = b.length,\r\n    al = a.length,\r\n    r = a.slice(0, bl),   // remainder\r\n    rl = r.length,\r\n    q = y,                // quotient\r\n    qc = q.c = [],\r\n    qi = 0,\r\n    p = dp + (q.e = x.e - y.e) + 1;    // precision of the result\r\n\r\n  q.s = k;\r\n  k = p < 0 ? 0 : p;\r\n\r\n  // Create version of divisor with leading zero.\r\n  bz.unshift(0);\r\n\r\n  // Add zeros to make remainder as long as divisor.\r\n  for (; rl++ < bl;) r.push(0);\r\n\r\n  do {\r\n\r\n    // n is how many times the divisor goes into current remainder.\r\n    for (n = 0; n < 10; n++) {\r\n\r\n      // Compare divisor and remainder.\r\n      if (bl != (rl = r.length)) {\r\n        cmp = bl > rl ? 1 : -1;\r\n      } else {\r\n        for (ri = -1, cmp = 0; ++ri < bl;) {\r\n          if (b[ri] != r[ri]) {\r\n            cmp = b[ri] > r[ri] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // If divisor < remainder, subtract divisor from remainder.\r\n      if (cmp < 0) {\r\n\r\n        // Remainder can't be more than 1 digit longer than divisor.\r\n        // Equalise lengths using divisor with extra leading zero?\r\n        for (bt = rl == bl ? b : bz; rl;) {\r\n          if (r[--rl] < bt[rl]) {\r\n            ri = rl;\r\n            for (; ri && !r[--ri];) r[ri] = 9;\r\n            --r[ri];\r\n            r[rl] += 10;\r\n          }\r\n          r[rl] -= bt[rl];\r\n        }\r\n\r\n        for (; !r[0];) r.shift();\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Add the digit n to the result array.\r\n    qc[qi++] = cmp ? n : ++n;\r\n\r\n    // Update the remainder.\r\n    if (r[0] && cmp) r[rl] = a[ai] || 0;\r\n    else r = [a[ai]];\r\n\r\n  } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\r\n\r\n  // Leading zero? Do not remove if result is simply zero (qi == 1).\r\n  if (!qc[0] && qi != 1) {\r\n\r\n    // There can't be more than one zero.\r\n    qc.shift();\r\n    q.e--;\r\n    p--;\r\n  }\r\n\r\n  // Round?\r\n  if (qi > p) round(q, p, Big.RM, r[0] !== UNDEFINED);\r\n\r\n  return q;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\r\n */\r\nP.eq = function (y) {\r\n  return this.cmp(y) === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is greater than the value of Big y, otherwise return\r\n * false.\r\n */\r\nP.gt = function (y) {\r\n  return this.cmp(y) > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\r\n * return false.\r\n */\r\nP.gte = function (y) {\r\n  return this.cmp(y) > -1;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is less than the value of Big y, otherwise return false.\r\n */\r\nP.lt = function (y) {\r\n  return this.cmp(y) < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\r\n * return false.\r\n */\r\nP.lte = function (y) {\r\n  return this.cmp(y) < 1;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big minus the value of Big y.\r\n */\r\nP.minus = P.sub = function (y) {\r\n  var i, j, t, xlty,\r\n    x = this,\r\n    Big = x.constructor,\r\n    a = x.s,\r\n    b = (y = new Big(y)).s;\r\n\r\n  // Signs differ?\r\n  if (a != b) {\r\n    y.s = -b;\r\n    return x.plus(y);\r\n  }\r\n\r\n  var xc = x.c.slice(),\r\n    xe = x.e,\r\n    yc = y.c,\r\n    ye = y.e;\r\n\r\n  // Either zero?\r\n  if (!xc[0] || !yc[0]) {\r\n    if (yc[0]) {\r\n      y.s = -b;\r\n    } else if (xc[0]) {\r\n      y = new Big(x);\r\n    } else {\r\n      y.s = 1;\r\n    }\r\n    return y;\r\n  }\r\n\r\n  // Determine which is the bigger number. Prepend zeros to equalise exponents.\r\n  if (a = xe - ye) {\r\n\r\n    if (xlty = a < 0) {\r\n      a = -a;\r\n      t = xc;\r\n    } else {\r\n      ye = xe;\r\n      t = yc;\r\n    }\r\n\r\n    t.reverse();\r\n    for (b = a; b--;) t.push(0);\r\n    t.reverse();\r\n  } else {\r\n\r\n    // Exponents equal. Check digit by digit.\r\n    j = ((xlty = xc.length < yc.length) ? xc : yc).length;\r\n\r\n    for (a = b = 0; b < j; b++) {\r\n      if (xc[b] != yc[b]) {\r\n        xlty = xc[b] < yc[b];\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  // x < y? Point xc to the array of the bigger number.\r\n  if (xlty) {\r\n    t = xc;\r\n    xc = yc;\r\n    yc = t;\r\n    y.s = -y.s;\r\n  }\r\n\r\n  /*\r\n   * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\r\n   * needs to start at yc.length.\r\n   */\r\n  if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;\r\n\r\n  // Subtract yc from xc.\r\n  for (b = i; j > a;) {\r\n    if (xc[--j] < yc[j]) {\r\n      for (i = j; i && !xc[--i];) xc[i] = 9;\r\n      --xc[i];\r\n      xc[j] += 10;\r\n    }\r\n\r\n    xc[j] -= yc[j];\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; xc[--b] === 0;) xc.pop();\r\n\r\n  // Remove leading zeros and adjust exponent accordingly.\r\n  for (; xc[0] === 0;) {\r\n    xc.shift();\r\n    --ye;\r\n  }\r\n\r\n  if (!xc[0]) {\r\n\r\n    // n - n = +0\r\n    y.s = 1;\r\n\r\n    // Result must be zero.\r\n    xc = [ye = 0];\r\n  }\r\n\r\n  y.c = xc;\r\n  y.e = ye;\r\n\r\n  return y;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big modulo the value of Big y.\r\n */\r\nP.mod = function (y) {\r\n  var ygtx,\r\n    x = this,\r\n    Big = x.constructor,\r\n    a = x.s,\r\n    b = (y = new Big(y)).s;\r\n\r\n  if (!y.c[0]) {\r\n    throw Error(DIV_BY_ZERO);\r\n  }\r\n\r\n  x.s = y.s = 1;\r\n  ygtx = y.cmp(x) == 1;\r\n  x.s = a;\r\n  y.s = b;\r\n\r\n  if (ygtx) return new Big(x);\r\n\r\n  a = Big.DP;\r\n  b = Big.RM;\r\n  Big.DP = Big.RM = 0;\r\n  x = x.div(y);\r\n  Big.DP = a;\r\n  Big.RM = b;\r\n\r\n  return this.minus(x.times(y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big negated.\r\n */\r\nP.neg = function () {\r\n  var x = new this.constructor(this);\r\n  x.s = -x.s;\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big plus the value of Big y.\r\n */\r\nP.plus = P.add = function (y) {\r\n  var e, k, t,\r\n    x = this,\r\n    Big = x.constructor;\r\n\r\n  y = new Big(y);\r\n\r\n  // Signs differ?\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.minus(y);\r\n  }\r\n\r\n  var xe = x.e,\r\n    xc = x.c,\r\n    ye = y.e,\r\n    yc = y.c;\r\n\r\n  // Either zero?\r\n  if (!xc[0] || !yc[0]) {\r\n    if (!yc[0]) {\r\n      if (xc[0]) {\r\n        y = new Big(x);\r\n      } else {\r\n        y.s = x.s;\r\n      }\r\n    }\r\n    return y;\r\n  }\r\n\r\n  xc = xc.slice();\r\n\r\n  // Prepend zeros to equalise exponents.\r\n  // Note: reverse faster than unshifts.\r\n  if (e = xe - ye) {\r\n    if (e > 0) {\r\n      ye = xe;\r\n      t = yc;\r\n    } else {\r\n      e = -e;\r\n      t = xc;\r\n    }\r\n\r\n    t.reverse();\r\n    for (; e--;) t.push(0);\r\n    t.reverse();\r\n  }\r\n\r\n  // Point xc to the longer array.\r\n  if (xc.length - yc.length < 0) {\r\n    t = yc;\r\n    yc = xc;\r\n    xc = t;\r\n  }\r\n\r\n  e = yc.length;\r\n\r\n  // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\r\n  for (k = 0; e; xc[e] %= 10) k = (xc[--e] = xc[e] + yc[e] + k) / 10 | 0;\r\n\r\n  // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n\r\n  if (k) {\r\n    xc.unshift(k);\r\n    ++ye;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (e = xc.length; xc[--e] === 0;) xc.pop();\r\n\r\n  y.c = xc;\r\n  y.e = ye;\r\n\r\n  return y;\r\n};\r\n\r\n\r\n/*\r\n * Return a Big whose value is the value of this Big raised to the power n.\r\n * If n is negative, round to a maximum of Big.DP decimal places using rounding\r\n * mode Big.RM.\r\n *\r\n * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\r\n */\r\nP.pow = function (n) {\r\n  var x = this,\r\n    one = new x.constructor('1'),\r\n    y = one,\r\n    isneg = n < 0;\r\n\r\n  if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) {\r\n    throw Error(INVALID + 'exponent');\r\n  }\r\n\r\n  if (isneg) n = -n;\r\n\r\n  for (;;) {\r\n    if (n & 1) y = y.times(x);\r\n    n >>= 1;\r\n    if (!n) break;\r\n    x = x.times(x);\r\n  }\r\n\r\n  return isneg ? one.div(y) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big rounded to a maximum precision of sd\r\n * significant digits using rounding mode rm, or Big.RM if rm is not specified.\r\n *\r\n * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\r\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n */\r\nP.prec = function (sd, rm) {\r\n  if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\r\n    throw Error(INVALID + 'precision');\r\n  }\r\n  return round(new this.constructor(this), sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big rounded to a maximum of dp decimal places\r\n * using rounding mode rm, or Big.RM if rm is not specified.\r\n * If dp is negative, round to an integer which is a multiple of 10**-dp.\r\n * If dp is not specified, round to 0 decimal places.\r\n *\r\n * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\r\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n */\r\nP.round = function (dp, rm) {\r\n  if (dp === UNDEFINED) dp = 0;\r\n  else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) {\r\n    throw Error(INVALID_DP);\r\n  }\r\n  return round(new this.constructor(this), dp + this.e + 1, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the square root of the value of this Big, rounded, if\r\n * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n */\r\nP.sqrt = function () {\r\n  var r, c, t,\r\n    x = this,\r\n    Big = x.constructor,\r\n    s = x.s,\r\n    e = x.e,\r\n    half = new Big('0.5');\r\n\r\n  // Zero?\r\n  if (!x.c[0]) return new Big(x);\r\n\r\n  // Negative?\r\n  if (s < 0) {\r\n    throw Error(NAME + 'No square root');\r\n  }\r\n\r\n  // Estimate.\r\n  s = Math.sqrt(x + '');\r\n\r\n  // Math.sqrt underflow/overflow?\r\n  // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\r\n  if (s === 0 || s === 1 / 0) {\r\n    c = x.c.join('');\r\n    if (!(c.length + e & 1)) c += '0';\r\n    s = Math.sqrt(c);\r\n    e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\r\n    r = new Big((s == 1 / 0 ? '5e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\r\n  } else {\r\n    r = new Big(s + '');\r\n  }\r\n\r\n  e = r.e + (Big.DP += 4);\r\n\r\n  // Newton-Raphson iteration.\r\n  do {\r\n    t = r;\r\n    r = half.times(t.plus(x.div(t)));\r\n  } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\r\n\r\n  return round(r, (Big.DP -= 4) + r.e + 1, Big.RM);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big times the value of Big y.\r\n */\r\nP.times = P.mul = function (y) {\r\n  var c,\r\n    x = this,\r\n    Big = x.constructor,\r\n    xc = x.c,\r\n    yc = (y = new Big(y)).c,\r\n    a = xc.length,\r\n    b = yc.length,\r\n    i = x.e,\r\n    j = y.e;\r\n\r\n  // Determine sign of result.\r\n  y.s = x.s == y.s ? 1 : -1;\r\n\r\n  // Return signed 0 if either 0.\r\n  if (!xc[0] || !yc[0]) {\r\n    y.c = [y.e = 0];\r\n    return y;\r\n  }\r\n\r\n  // Initialise exponent of result as x.e + y.e.\r\n  y.e = i + j;\r\n\r\n  // If array xc has fewer digits than yc, swap xc and yc, and lengths.\r\n  if (a < b) {\r\n    c = xc;\r\n    xc = yc;\r\n    yc = c;\r\n    j = a;\r\n    a = b;\r\n    b = j;\r\n  }\r\n\r\n  // Initialise coefficient array of result with zeros.\r\n  for (c = new Array(j = a + b); j--;) c[j] = 0;\r\n\r\n  // Multiply.\r\n\r\n  // i is initially xc.length.\r\n  for (i = b; i--;) {\r\n    b = 0;\r\n\r\n    // a is yc.length.\r\n    for (j = a + i; j > i;) {\r\n\r\n      // Current sum of products at this digit position, plus carry.\r\n      b = c[j] + yc[i] * xc[j - i - 1] + b;\r\n      c[j--] = b % 10;\r\n\r\n      // carry\r\n      b = b / 10 | 0;\r\n    }\r\n\r\n    c[j] = b;\r\n  }\r\n\r\n  // Increment result exponent if there is a final carry, otherwise remove leading zero.\r\n  if (b) ++y.e;\r\n  else c.shift();\r\n\r\n  // Remove trailing zeros.\r\n  for (i = c.length; !c[--i];) c.pop();\r\n  y.c = c;\r\n\r\n  return y;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big in exponential notation rounded to dp fixed\r\n * decimal places using rounding mode rm, or Big.RM if rm is not specified.\r\n *\r\n * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\r\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n */\r\nP.toExponential = function (dp, rm) {\r\n  var x = this,\r\n    n = x.c[0];\r\n\r\n  if (dp !== UNDEFINED) {\r\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n      throw Error(INVALID_DP);\r\n    }\r\n    x = round(new x.constructor(x), ++dp, rm);\r\n    for (; x.c.length < dp;) x.c.push(0);\r\n  }\r\n\r\n  return stringify(x, true, !!n);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big in normal notation rounded to dp fixed\r\n * decimal places using rounding mode rm, or Big.RM if rm is not specified.\r\n *\r\n * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\r\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n */\r\nP.toFixed = function (dp, rm) {\r\n  var x = this,\r\n    n = x.c[0];\r\n\r\n  if (dp !== UNDEFINED) {\r\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n      throw Error(INVALID_DP);\r\n    }\r\n    x = round(new x.constructor(x), dp + x.e + 1, rm);\r\n\r\n    // x.e may have changed if the value is rounded up.\r\n    for (dp = dp + x.e + 1; x.c.length < dp;) x.c.push(0);\r\n  }\r\n\r\n  return stringify(x, false, !!n);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big.\r\n * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n * Omit the sign for negative zero.\r\n */\r\nP[Symbol.for('nodejs.util.inspect.custom')] = P.toJSON = P.toString = function () {\r\n  var x = this,\r\n    Big = x.constructor;\r\n  return stringify(x, x.e <= Big.NE || x.e >= Big.PE, !!x.c[0]);\r\n};\r\n\r\n\r\n/*\r\n * Return the value of this Big as a primitve number.\r\n */\r\nP.toNumber = function () {\r\n  var n = Number(stringify(this, true, true));\r\n  if (this.constructor.strict === true && !this.eq(n.toString())) {\r\n    throw Error(NAME + 'Imprecise conversion');\r\n  }\r\n  return n;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big rounded to sd significant digits using\r\n * rounding mode rm, or Big.RM if rm is not specified.\r\n * Use exponential notation if sd is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\r\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n */\r\nP.toPrecision = function (sd, rm) {\r\n  var x = this,\r\n    Big = x.constructor,\r\n    n = x.c[0];\r\n\r\n  if (sd !== UNDEFINED) {\r\n    if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\r\n      throw Error(INVALID + 'precision');\r\n    }\r\n    x = round(new Big(x), sd, rm);\r\n    for (; x.c.length < sd;) x.c.push(0);\r\n  }\r\n\r\n  return stringify(x, sd <= x.e || x.e <= Big.NE || x.e >= Big.PE, !!n);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big.\r\n * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n * Include the sign for negative zero.\r\n */\r\nP.valueOf = function () {\r\n  var x = this,\r\n    Big = x.constructor;\r\n  if (Big.strict === true) {\r\n    throw Error(NAME + 'valueOf disallowed');\r\n  }\r\n  return stringify(x, x.e <= Big.NE || x.e >= Big.PE, true);\r\n};\r\n\r\n\r\n// Export\r\n\r\n\r\nexport var Big = _Big_();\r\n\r\n/// <reference types=\"https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/types/big.js/index.d.ts\" />\r\nexport default Big;\r\n","import Big from \"big.js\";\n\nexport const calculatePrettyBalance = (\n  value: number | bigint,\n  decimals: number = 18,\n  roundOff: boolean = true,\n  precision: number = 0\n): string => {\n  const bigDecimalValue = new Big(value.toString());\n  const bigDecimalExpo = new Big(Math.pow(10, decimals).toString());\n  const calculated = bigDecimalValue.div(bigDecimalExpo);\n\n  if (decimals === 0 || !roundOff) {\n    return calculated.toString();\n  }\n\n  const decimalFixed = precision || (calculated.lt(100) ? 6 : 2);\n  return calculated.toFixed(decimalFixed);\n};\n","import { type Quote } from \"../types/Generic.types\";\n\nconst LESS_THAN_ZERO: string = \"0.01\";\nconst ZERO: string = \"0.00\";\n\nconst currencyMap: Record<Quote, string> = {\n  USD: \"$\",\n  CAD: \"CA$\",\n  EUR: \"€\",\n  SGD: \"S$\",\n  INR: \"₹\",\n  JPY: \"¥\",\n  VND: \"₫\",\n  CNY: \"CN¥\",\n  KRW: \"₩\",\n  RUB: \"₽\",\n  TRY: \"₺\",\n  NGN: \"₦\",\n  ARS: \"ARS\",\n  AUD: \"A$\",\n  CHF: \"CHF\",\n  GBP: \"£\",\n};\n\nexport const prettifyCurrency = (\n  value: number | bigint | string,\n  decimals = 2,\n  currency: Quote = \"USD\",\n  ignoreSmallValue = false,\n  ignoreMinus = true,\n  ignoreZero = false\n): string => {\n  let numValue = Number(value);\n  let minus = \"\";\n  let currencySuffix = \"\";\n\n  if (!ignoreMinus && numValue < 0) {\n    numValue = Math.abs(numValue);\n    minus = \"-\";\n  }\n\n  const currencySymbol = currencyMap[currency] ?? \"$\";\n\n  if (numValue === 0 || isNaN(numValue)) {\n    return ignoreZero\n      ? `<${currencySymbol}${LESS_THAN_ZERO}`\n      : `${currencySymbol}${ZERO}`;\n  }\n\n  if (numValue < 0.01 && ignoreSmallValue) {\n    return `<${currencySymbol}${LESS_THAN_ZERO}`;\n  }\n\n  if (numValue > 999999999) {\n    numValue /= 1000000000;\n    currencySuffix = \"B\";\n  } else if (numValue > 999999) {\n    numValue /= 1000000;\n    currencySuffix = \"M\";\n  }\n\n  const factor = Math.pow(10, decimals);\n  numValue = Math.floor(numValue * factor) / factor;\n\n  const formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: currency,\n    maximumFractionDigits: decimals,\n    currencyDisplay: \"symbol\",\n  });\n\n  const formattedValue = formatter\n    .format(numValue)\n    .replace(new RegExp(`${currency}\\\\s?`), currencySymbol);\n\n  return minus + formattedValue + currencySuffix;\n};\n","export enum ChainName {\n  ETH_MAINNET = \"eth-mainnet\",\n  ETH_GOERLI = \"eth-goerli\",\n  ETH_SEPOLIA = \"eth-sepolia\",\n  ETH_HOLESKY = \"eth-holesky\",\n  MATIC_MAINNET = \"matic-mainnet\",\n  MATIC_MUMBAI = \"matic-mumbai\",\n  AVALANCHE_MAINNET = \"avalanche-mainnet\",\n  AVALANCHE_TESTNET = \"avalanche-testnet\",\n  BSC_MAINNET = \"bsc-mainnet\",\n  BSC_TESTNET = \"bsc-testnet\",\n  MOONBEAM_MAINNET = \"moonbeam-mainnet\",\n  MOONBEAM_MOONBASE_ALPHA = \"moonbeam-moonbase-alpha\",\n  MOONBEAM_MOONRIVER = \"moonbeam-moonriver\",\n  RSK_MAINNET = \"rsk-mainnet\",\n  RSK_TESTNET = \"rsk-testnet\",\n  ARBITRUM_MAINNET = \"arbitrum-mainnet\",\n  ARBITRUM_NOVA_MAINNET = \"arbitrum-nova-mainnet\",\n  ARBITRUM_SEPOLIA = \"arbitrum-sepolia\",\n  FANTOM_MAINNET = \"fantom-mainnet\",\n  FANTOM_TESTNET = \"fantom-testnet\",\n  PALM_MAINNET = \"palm-mainnet\",\n  PALM_TESTNET = \"palm-testnet\",\n  BTC_MAINNET = \"btc-mainnet\",\n  SOLANA_MAINNET = \"solana-mainnet\",\n  AXIE_MAINNET = \"axie-mainnet\",\n  OPTIMISM_MAINNET = \"optimism-mainnet\",\n  OPTIMISM_SEPOLIA = \"optimism-sepolia\",\n  EVMOS_MAINNET = \"evmos-mainnet\",\n  EVMOS_TESTNET = \"evmos-testnet\",\n  HARMONY_MAINNET = \"harmony-mainnet\",\n  HARMONY_TESTNET = \"harmony-testnet\",\n  CRONOS_MAINNET = \"cronos-mainnet\",\n  CRONOS_TESTNET = \"cronos-testnet\",\n  CRONOS_ZKEVM_TESTNET = \"cronos-zkevm-testnet\",\n  AURORA_MAINNET = \"aurora-mainnet\",\n  AURORA_TESTNET = \"aurora-testnet\",\n  EMERALD_PARATIME_MAINNET = \"emerald-paratime-mainnet\",\n  DEFI_KINGDOMS_MAINNET = \"defi-kingdoms-mainnet\",\n  DEFI_KINGDOMS_TESTNET = \"defi-kingdoms-testnet\",\n  BOBA_MAINNET = \"boba-mainnet\",\n  BOBA_BNB_MAINNET = \"boba-bnb-mainnet\",\n  BOBA_BNB_TESTNET = \"boba-bnb-testnet\",\n  SCROLL_SEPOLIA_TESTNET = \"scroll-sepolia-testnet\",\n  METIS_MAINNET = \"metis-mainnet\",\n  METIS_STARDUST = \"metis-stardust\",\n  AVALANCHE_DEXALOT_MAINNET = \"avalanche-dexalot-mainnet\",\n  AVALANCHE_DEXALOT_TESTNET = \"avalanche-dexalot-testnet\",\n  AVALANCHE_SHRAPNEL_MAINNET = \"avalanche-shrapnel-mainnet\",\n  AVALANCHE_NUMBERS = \"avalanche-numbers\",\n  AVALANCHE_DOS = \"avalanche-dos\",\n  AVALANCHE_XPLUS = \"avalanche-xplus\",\n  AVALANCHE_XANACHAIN = \"avalanche-xanachain\",\n  AVALANCHE_STEP_NETWORK = \"avalanche-step-network\",\n  AVALANCHE_SHRAPNEL_TESTNET = \"avalanche-shrapnel-testnet\",\n  AVALANCHE_BEAM_TESTNET = \"avalanche-beam-testnet\",\n  AVALANCHE_BLITZ_TESTNET = \"avalanche-blitz-testnet\",\n  AVALANCHE_MINTARA_TESTNET = \"avalanche-mintara-testnet\",\n  AVALANCHE_GREEN_DOT_TESTNET = \"avalanche-green-dot-testnet\",\n  AVALANCHE_PULSAR_TESTNET = \"avalanche-pulsar-testnet\",\n  AVALANCHE_UPTN = \"avalanche-uptn\",\n  AVALANCHE_AVACLOUD_TESTNET = \"avalanche-avacloud-testnet\",\n  AVALANCHE_BEAM_MAINNET = \"avalanche-beam-mainnet\",\n  AVALANCHE_BULLETIN_TESTNET = \"avalanche-bulletin-testnet\",\n  AVALANCHE_CONDUIT_TESTNET = \"avalanche-conduit-testnet\",\n  AVALANCHE_HERO_TESTNET = \"avalanche-hero-testnet\",\n  AVALANCHE_HUBBLE_EXCHANGE_TESTNET = \"avalanche-hubble-exchange-testnet\",\n  AVALANCHE_KIWI_TESTNET = \"avalanche-kiwi-testnet\",\n  AVALANCHE_MIHO_TESTNET = \"avalanche-miho-testnet\",\n  AVALANCHE_MONDRIAN_TESTNET = \"avalanche-mondrian-testnet\",\n  AVALANCHE_NMAC_TESTNET = \"avalanche-nmac-testnet\",\n  AVALANCHE_ORDERLY_TESTNET = \"avalanche-orderly-testnet\",\n  AVALANCHE_THIRDWEB_TESTNET = \"avalanche-thirdweb-testnet\",\n  AVALANCHE_WAGMI_TESTNET = \"avalanche-wagmi-testnet\",\n  AVALANCHE_PLAYA3ULL_TESTNET = \"avalanche-playa3ull-testnet\",\n  AVALANCHE_MIRAI_TESTNET = \"avalanche-mirai-testnet\",\n  AVALANCHE_AMPLIFY_TESTNET = \"avalanche-amplify-testnet\",\n  AVALANCHE_LT0_TESTNET = \"avalanche-lt0-testnet\",\n  AVALANCHE_LT5_TESTNET = \"avalanche-lt5-testnet\",\n  AVALANCHE_HUBBLE_EXCHANGE_MAINNET = \"avalanche-hubble-exchange-mainnet\",\n  METER_MAINNET = \"meter-mainnet\",\n  METER_TESTNET = \"meter-testnet\",\n  MILKOMEDA_A1_MAINNET = \"milkomeda-a1-mainnet\",\n  MILKOMEDA_C1_MAINNET = \"milkomeda-c1-mainnet\",\n  MILKOMEDA_C1_DEVNET = \"milkomeda-c1-devnet\",\n  CANTO_MAINNET = \"canto-mainnet\",\n  FLARENETWORKS_FLARE_MAINNET = \"flarenetworks-flare-mainnet\",\n  FLARENETWORKS_FLARE_TESTNET = \"flarenetworks-flare-testnet\",\n  FLARENETWORKS_CANARY_MAINNET = \"flarenetworks-canary-mainnet\",\n  FLARENETWORKS_CANARY_TESTNET = \"flarenetworks-canary-testnet\",\n  KCC_MAINNET = \"kcc-mainnet\",\n  KCC_TESTNET = \"kcc-testnet\",\n  LINEA_MAINNET = \"linea-mainnet\",\n  POLYGON_ZKEVM_MAINNET = \"polygon-zkevm-mainnet\",\n  LINEA_SEPOLIA_TESTNET = \"linea-sepolia-testnet\",\n  LINEA_GOERLI_TESTNET = \"linea-goerli-testnet\",\n  POLYGON_ZKEVM_TESTNET = \"polygon-zkevm-testnet\",\n  POLYGON_AMOY_TESTNET = \"polygon-amoy-testnet\",\n  MANTLE_MAINNET = \"mantle-mainnet\",\n  MANTLE_SEPOLIA_TESTNET = \"mantle-sepolia-testnet\",\n  POLYGON_ZKEVM_CARDONA_TESTNET = \"polygon-zkevm-cardona-testnet\",\n  BASE_MAINNET = \"base-mainnet\",\n  BASE_TESTNET = \"base-testnet\",\n  BASE_SEPOLIA_TESTNET = \"base-sepolia-testnet\",\n  OASYS_MAINNET = \"oasys-mainnet\",\n  OASYS_TESTNET = \"oasys-testnet\",\n  SX_MAINNET = \"sx-mainnet\",\n  LUMOZ_PUBLIC_ZKSYNC_V2 = \"lumoz-public-zksync-v2\",\n  LUMOZ_STARK_SPORT = \"lumoz-stark-sport\",\n  OASIS_SAPPHIRE_MAINNET = \"oasis-sapphire-mainnet\",\n  OASIS_SAPPHIRE_TESTNET = \"oasis-sapphire-testnet\",\n  SYNDR_TESTNET = \"syndr-testnet\",\n  XAI_MAINNET = \"xai-mainnet\",\n  CELO_MAINNET = \"celo-mainnet\",\n  X1_MAINNET = \"x1-mainnet\",\n  CROSSFI_EVM_TESTNET = \"crossfi-evm-testnet\",\n  HORIZEN_EON_MAINNET = \"horizen-eon-mainnet\",\n  HORIZEN_GOBI_TESTNET = \"horizen-gobi-testnet\",\n  FRAXTAL_MAINNET = \"fraxtal-mainnet\",\n  APECHAIN_TESTNET = \"apechain-testnet\",\n  LISK_MAINNET = \"lisk-mainnet\",\n  REDSTONE_MAINNET = \"redstone-mainnet\",\n  SEI_MAINNET = \"sei-mainnet\",\n  AVALANCHE_MELD_TESTNET = \"avalanche-meld-testnet\",\n  AVALANCHE_MELD_MAINNET = \"avalanche-meld-mainnet\",\n  GUNZILLA_TESTNET = \"gunzilla-testnet\",\n  ULTRON_MAINNET = \"ultron-mainnet\",\n  ULTRON_TESTNET = \"ultron-testnet\",\n  ZORA_MAINNET = \"zora-mainnet\",\n  ZORA_SEPOLIA_TESTNET = \"zora-sepolia-testnet\",\n  LISK_SEPOLIA_TESTNET = \"lisk-sepolia-testnet\",\n  OPSIDE_READON_CONTENT_TESTNET = \"opside-readon-content-testnet\",\n  ZKSYNC_MAINNET = \"zksync-mainnet\",\n  ZKSYNC_SEPOLIA_TESTNET = \"zksync-sepolia-testnet\",\n  BNB_ANTIMATTER_TESTNET = \"bnb-antimatter-testnet\",\n  BNB_META_APES_MAINNET = \"bnb-meta-apes-mainnet\",\n  BNB_FNCY_MAINNET = \"bnb-fncy-mainnet\",\n  BNB_OPBNB_TESTNET = \"bnb-opbnb-testnet\",\n  BNB_FNCY_TESTNET = \"bnb-fncy-testnet\",\n  BNB_OPBNB_MAINNET = \"bnb-opbnb-mainnet\",\n  ZETACHAIN_TESTNET = \"zetachain-testnet\",\n  ZETACHAIN_MAINNET = \"zetachain-mainnet\",\n  MODE_TESTNET = \"mode-testnet\",\n  MODE_MAINNET = \"mode-mainnet\",\n  KINTO_TESTNET = \"kinto-testnet\",\n  LOOT_MAINNET = \"loot-mainnet\",\n  PGN_MAINNET = \"pgn-mainnet\",\n  PGN_TESTNET = \"pgn-testnet\",\n  MANTA_SEPOLIA_TESTNET = \"manta-sepolia-testnet\",\n  ROLLUX_MAINNET = \"rollux-mainnet\",\n  ROLLUX_TESTNET = \"rollux-testnet\",\n  GNOSIS_MAINNET = \"gnosis-mainnet\",\n  GNOSIS_TESTNET = \"gnosis-testnet\",\n  TELOS_MAINNET = \"telos-mainnet\",\n  TELOS_TESTNET = \"telos-testnet\",\n  TOMOCHAIN_MAINNET = \"tomochain-mainnet\",\n  TOMOCHAIN_TESTNET = \"tomochain-testnet\",\n  TAIKO_MAINNET = \"taiko-mainnet\",\n  TAIKO_HEKLA_TESTNET = \"taiko-hekla-testnet\",\n  MERLIN_MAINNET = \"merlin-mainnet\",\n  MERLIN_TESTNET = \"merlin-testnet\",\n  BLAST_MAINNET = \"blast-mainnet\",\n  MOVEMENT_MEVM_TESTNET = \"movement-mevm-testnet\",\n  SCROLL_MAINNET = \"scroll-mainnet\",\n  COVALENT_INTERNAL_NETWORK_V1 = \"covalent-internal-network-v1\",\n}\n\nexport enum ChainID {\n  ETH_MAINNET = 1,\n  ETH_GOERLI = 5,\n  ETH_SEPOLIA = 11155111,\n  ETH_HOLESKY = 17000,\n  MATIC_MAINNET = 137,\n  MATIC_MUMBAI = 80001,\n  AVALANCHE_MAINNET = 43114,\n  AVALANCHE_TESTNET = 43113,\n  BSC_MAINNET = 56,\n  BSC_TESTNET = 97,\n  MOONBEAM_MAINNET = 1284,\n  MOONBEAM_MOONBASE_ALPHA = 1287,\n  MOONBEAM_MOONRIVER = 1285,\n  RSK_MAINNET = 30,\n  RSK_TESTNET = 31,\n  ARBITRUM_MAINNET = 42161,\n  ARBITRUM_NOVA_MAINNET = 42170,\n  ARBITRUM_SEPOLIA = 421614,\n  FANTOM_MAINNET = 250,\n  FANTOM_TESTNET = 4002,\n  PALM_MAINNET = 11297108109,\n  PALM_TESTNET = 11297108099,\n  BTC_MAINNET = 20090103,\n  SOLANA_MAINNET = 1399811149,\n  AXIE_MAINNET = 2020,\n  OPTIMISM_MAINNET = 10,\n  OPTIMISM_SEPOLIA = 11155420,\n  EVMOS_MAINNET = 9001,\n  EVMOS_TESTNET = 9000,\n  HARMONY_MAINNET = 1666600000,\n  HARMONY_TESTNET = 1666700000,\n  CRONOS_MAINNET = 25,\n  CRONOS_TESTNET = 338,\n  CRONOS_ZKEVM_TESTNET = 282,\n  AURORA_MAINNET = 1313161554,\n  AURORA_TESTNET = 1313161555,\n  EMERALD_PARATIME_MAINNET = 42262,\n  DEFI_KINGDOMS_MAINNET = 53935,\n  DEFI_KINGDOMS_TESTNET = 335,\n  BOBA_MAINNET = 288,\n  BOBA_BNB_MAINNET = 56288,\n  BOBA_BNB_TESTNET = 9728,\n  SCROLL_SEPOLIA_TESTNET = 534351,\n  METIS_MAINNET = 1088,\n  METIS_STARDUST = 588,\n  AVALANCHE_DEXALOT_MAINNET = 432204,\n  AVALANCHE_DEXALOT_TESTNET = 432201,\n  AVALANCHE_SHRAPNEL_MAINNET = 2044,\n  AVALANCHE_NUMBERS = 10507,\n  AVALANCHE_DOS = 7979,\n  AVALANCHE_XPLUS = 1228,\n  AVALANCHE_XANACHAIN = 8888,\n  AVALANCHE_STEP_NETWORK = 1234,\n  AVALANCHE_SHRAPNEL_TESTNET = 2038,\n  AVALANCHE_BEAM_TESTNET = 13337,\n  AVALANCHE_BLITZ_TESTNET = 1343,\n  AVALANCHE_MINTARA_TESTNET = 1079,\n  AVALANCHE_GREEN_DOT_TESTNET = 6765897100,\n  AVALANCHE_PULSAR_TESTNET = 431234,\n  AVALANCHE_UPTN = 6119,\n  AVALANCHE_AVACLOUD_TESTNET = 152703,\n  AVALANCHE_BEAM_MAINNET = 4337,\n  AVALANCHE_BULLETIN_TESTNET = 78431,\n  AVALANCHE_CONDUIT_TESTNET = 78432,\n  AVALANCHE_HERO_TESTNET = 17772,\n  AVALANCHE_HUBBLE_EXCHANGE_TESTNET = 321123,\n  AVALANCHE_KIWI_TESTNET = 2037,\n  AVALANCHE_MIHO_TESTNET = 360163,\n  AVALANCHE_MONDRIAN_TESTNET = 179188,\n  AVALANCHE_NMAC_TESTNET = 7777,\n  AVALANCHE_ORDERLY_TESTNET = 986532,\n  AVALANCHE_THIRDWEB_TESTNET = 894538,\n  AVALANCHE_WAGMI_TESTNET = 11111,\n  AVALANCHE_PLAYA3ULL_TESTNET = 3012,\n  AVALANCHE_MIRAI_TESTNET = 2195,\n  AVALANCHE_AMPLIFY_TESTNET = 78430,\n  AVALANCHE_LT0_TESTNET = 31330,\n  AVALANCHE_LT5_TESTNET = 31335,\n  AVALANCHE_HUBBLE_EXCHANGE_MAINNET = 1992,\n  METER_MAINNET = 82,\n  METER_TESTNET = 83,\n  MILKOMEDA_A1_MAINNET = 2002,\n  MILKOMEDA_C1_MAINNET = 2001,\n  MILKOMEDA_C1_DEVNET = 200101,\n  CANTO_MAINNET = 7700,\n  FLARENETWORKS_FLARE_MAINNET = 14,\n  FLARENETWORKS_FLARE_TESTNET = 114,\n  FLARENETWORKS_CANARY_MAINNET = 19,\n  FLARENETWORKS_CANARY_TESTNET = 16,\n  KCC_MAINNET = 321,\n  KCC_TESTNET = 322,\n  LINEA_MAINNET = 59144,\n  POLYGON_ZKEVM_MAINNET = 1101,\n  LINEA_SEPOLIA_TESTNET = 59141,\n  LINEA_GOERLI_TESTNET = 59140,\n  POLYGON_ZKEVM_TESTNET = 1422,\n  POLYGON_AMOY_TESTNET = 80002,\n  MANTLE_MAINNET = 5000,\n  MANTLE_SEPOLIA_TESTNET = 5003,\n  POLYGON_ZKEVM_CARDONA_TESTNET = 2442,\n  BASE_MAINNET = 8453,\n  BASE_TESTNET = 84531,\n  BASE_SEPOLIA_TESTNET = 84532,\n  OASYS_MAINNET = 248,\n  OASYS_TESTNET = 9372,\n  SX_MAINNET = 416,\n  LUMOZ_PUBLIC_ZKSYNC_V2 = 12027,\n  LUMOZ_STARK_SPORT = 12029,\n  OASIS_SAPPHIRE_MAINNET = 23294,\n  OASIS_SAPPHIRE_TESTNET = 23295,\n  SYNDR_TESTNET = 412346,\n  XAI_MAINNET = 660279,\n  CELO_MAINNET = 42220,\n  X1_MAINNET = 196,\n  CROSSFI_EVM_TESTNET = 8545,\n  HORIZEN_EON_MAINNET = 7332,\n  HORIZEN_GOBI_TESTNET = 1663,\n  FRAXTAL_MAINNET = 252,\n  APECHAIN_TESTNET = 1798,\n  LISK_MAINNET = 1135,\n  REDSTONE_MAINNET = 690,\n  SEI_MAINNET = 1329,\n  AVALANCHE_MELD_TESTNET = 222000222,\n  AVALANCHE_MELD_MAINNET = 333000333,\n  GUNZILLA_TESTNET = 49321,\n  ULTRON_MAINNET = 1231,\n  ULTRON_TESTNET = 1230,\n  ZORA_MAINNET = 7777777,\n  ZORA_SEPOLIA_TESTNET = 999999999,\n  LISK_SEPOLIA_TESTNET = 4202,\n  OPSIDE_READON_CONTENT_TESTNET = 12015,\n  ZKSYNC_MAINNET = 324,\n  ZKSYNC_SEPOLIA_TESTNET = 300,\n  BNB_ANTIMATTER_TESTNET = 20221,\n  BNB_META_APES_MAINNET = 16350,\n  BNB_FNCY_MAINNET = 73,\n  BNB_OPBNB_TESTNET = 5611,\n  BNB_FNCY_TESTNET = 923018,\n  BNB_OPBNB_MAINNET = 204,\n  ZETACHAIN_TESTNET = 7001,\n  ZETACHAIN_MAINNET = 7000,\n  MODE_TESTNET = 919,\n  MODE_MAINNET = 34443,\n  KINTO_TESTNET = 42888,\n  LOOT_MAINNET = 5151706,\n  PGN_MAINNET = 424,\n  PGN_TESTNET = 58008,\n  MANTA_SEPOLIA_TESTNET = 3441006,\n  ROLLUX_MAINNET = 570,\n  ROLLUX_TESTNET = 57000,\n  GNOSIS_MAINNET = 100,\n  GNOSIS_TESTNET = 10200,\n  TELOS_MAINNET = 40,\n  TELOS_TESTNET = 41,\n  TOMOCHAIN_MAINNET = 88,\n  TOMOCHAIN_TESTNET = 89,\n  TAIKO_MAINNET = 167000,\n  TAIKO_HEKLA_TESTNET = 167009,\n  MERLIN_MAINNET = 4200,\n  MERLIN_TESTNET = 686868,\n  BLAST_MAINNET = 81457,\n  MOVEMENT_MEVM_TESTNET = 336,\n  SCROLL_MAINNET = 534352,\n  COVALENT_INTERNAL_NETWORK_V1 = 1131378225,\n}\n\nexport type Chain = ChainID | ChainName | `${ChainName}` | `${ChainID}`;\n\nexport type Source = \"Ponder\" | \"GoldRush\" | \"Viem\";\n\nexport type Quote =\n  | \"USD\"\n  | \"CAD\"\n  | \"EUR\"\n  | \"SGD\"\n  | \"INR\"\n  | \"JPY\"\n  | \"VND\"\n  | \"CNY\"\n  | \"KRW\"\n  | \"RUB\"\n  | \"TRY\"\n  | \"NGN\"\n  | \"ARS\"\n  | \"AUD\"\n  | \"CHF\"\n  | \"GBP\";\n\nexport interface Pagination {\n  /** * True is there is another page. */\n  has_more: boolean;\n  /** * The requested page number. */\n  page_number: number;\n  /** * The requested number of items on the current page. */\n  page_size: number;\n  /** * The total number of items across all pages for this request. */\n  total_count: number;\n}\n\nexport interface PaginationLinks {\n  /** * URL link to the next page. */\n  prev: string;\n  /** * URL link to the previous page. */\n  next: string;\n}\n\nexport interface NftCollectionAttribute {\n  trait_type: string;\n  value: string;\n}\n\nexport type NftData = Nullable<{\n  /** * The token's id. */\n  token_id: bigint;\n  token_url: string;\n  /** * The original minter. */\n  original_owner: string;\n  /** * The current holder of this NFT. */\n  current_owner: string;\n  external_data: NftExternalData;\n  /** * If `true`, the asset data is available from the Covalent CDN. */\n  asset_cached: boolean;\n  /** * If `true`, the image data is available from the Covalent CDN. */\n  image_cached: boolean;\n}>;\n\nexport interface NftExternalData {\n  name: string;\n  description: string;\n  asset_url: string;\n  asset_file_extension: string;\n  asset_mime_type: string;\n  asset_size_bytes: string;\n  image: string;\n  image_256: string;\n  image_512: string;\n  image_1024: string;\n  animation_url: string;\n  external_url: string;\n  attributes: NftCollectionAttribute[];\n}\n\nexport interface DecodedItem {\n  name: string;\n  signature: string;\n  params: Param[];\n}\n\nexport interface Param {\n  name: string;\n  type: string;\n  indexed: boolean;\n  decoded: boolean;\n  value: string;\n}\n\nexport type LogEvent = Nullable<{\n  /** * The block signed timestamp in UTC. */\n  block_signed_at: Date;\n  /** * The height of the block. */\n  block_height: number;\n  /** * The offset is the position of the tx in the block. */\n  tx_offset: number;\n  /** * The offset is the position of the log entry within an event log. */\n  log_offset: number;\n  /** * The requested transaction hash. */\n  tx_hash: string;\n  /** * The log topics in raw data. */\n  raw_log_topics: string[];\n  /** * Use contract decimals to format the token balance for display purposes - divide the balance by `10^{contract_decimals}`. */\n  sender_contract_decimals: number;\n  /** * The name of the sender. */\n  sender_name: string;\n  sender_contract_ticker_symbol: string;\n  /** * The address of the sender. */\n  sender_address: string;\n  /** * The label of the sender address. */\n  sender_address_label: string;\n  /** * The contract logo URL. */\n  sender_logo_url: string;\n  /** * A list of supported standard ERC interfaces, eg: `ERC20` and `ERC721`. */\n  supports_erc: string[];\n  /** * The address of the deployed UniswapV2 like factory contract for this DEX. */\n  sender_factory_address: string;\n  /** * The log events in raw. */\n  raw_log_data: string;\n  /** * The decoded item. */\n  decoded: DecodedItem;\n}>;\n\nexport interface ContractMetadata {\n  /** * Use contract decimals to format the token balance for display purposes - divide the balance by `10^{contract_decimals}`. */\n  contract_decimals: number;\n  /** * The string returned by the `name()` method. */\n  contract_name: string;\n  /** * The ticker symbol for this contract. This field is set by a developer and non-unique across a network. */\n  contract_ticker_symbol: string;\n  /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */\n  contract_address: string;\n  /** * A list of supported standard ERC interfaces, eg: `ERC20` and `ERC721`. */\n  supports_erc: string[];\n  /** * The contract logo URL. */\n  logo_url: string;\n}\n\nexport interface Explorer {\n  /** * The name of the explorer. */\n  label: string;\n  /** * The URL of the explorer. */\n  url: string;\n}\n\nexport interface LogoUrls {\n  /** * The token logo URL. */\n  token_logo_url: string;\n  /** * The protocol logo URL. */\n  protocol_logo_url: string;\n  /** * The chain logo URL. */\n  chain_logo_url: string;\n}\n\nexport type GoldRushResponse<T> =\n  | {\n      data: T;\n      error: false | null;\n      error_code: null;\n      error_message: null;\n    }\n  | {\n      data: null;\n      error: true;\n      error_code: number;\n      error_message: string;\n    };\n\nexport interface GoldRushClientSettings {\n  /** * Toggle to analyze the execution of each api request. */\n  debug?: boolean;\n  /** * The number of concurrent requests allowed. */\n  threadCount?: number;\n  /** Toggle to turn on and off retry logic */\n  enableRetry?: boolean;\n  /** Set the retry logic count */\n  maxRetries?: number;\n  /** Set the retry delay in ms */\n  retryDelay?: number;\n  /** Set the source of the usage */\n  source?: Source | string;\n}\n\nexport type Nullable<T> = {\n  [P in keyof T]: T[P] | null;\n};\n"],"names":["Queue","require$$0","pLimit","ChainName","ChainID"],"mappings":"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","x_google_ignoreList":[10,11,15]}