export declare enum ChainName {
    ETH_MAINNET = "eth-mainnet",
    ETH_GOERLI = "eth-goerli",
    ETH_SEPOLIA = "eth-sepolia",
    ETH_HOLESKY = "eth-holesky",
    MATIC_MAINNET = "matic-mainnet",
    MATIC_MUMBAI = "matic-mumbai",
    AVALANCHE_MAINNET = "avalanche-mainnet",
    AVALANCHE_TESTNET = "avalanche-testnet",
    BSC_MAINNET = "bsc-mainnet",
    BSC_TESTNET = "bsc-testnet",
    MOONBEAM_MAINNET = "moonbeam-mainnet",
    MOONBEAM_MOONBASE_ALPHA = "moonbeam-moonbase-alpha",
    MOONBEAM_MOONRIVER = "moonbeam-moonriver",
    RSK_MAINNET = "rsk-mainnet",
    RSK_TESTNET = "rsk-testnet",
    ARBITRUM_MAINNET = "arbitrum-mainnet",
    ARBITRUM_NOVA_MAINNET = "arbitrum-nova-mainnet",
    ARBITRUM_SEPOLIA = "arbitrum-sepolia",
    FANTOM_MAINNET = "fantom-mainnet",
    FANTOM_TESTNET = "fantom-testnet",
    PALM_MAINNET = "palm-mainnet",
    PALM_TESTNET = "palm-testnet",
    BTC_MAINNET = "btc-mainnet",
    SOLANA_MAINNET = "solana-mainnet",
    AXIE_MAINNET = "axie-mainnet",
    OPTIMISM_MAINNET = "optimism-mainnet",
    OPTIMISM_SEPOLIA = "optimism-sepolia",
    EVMOS_MAINNET = "evmos-mainnet",
    EVMOS_TESTNET = "evmos-testnet",
    HARMONY_MAINNET = "harmony-mainnet",
    HARMONY_TESTNET = "harmony-testnet",
    CRONOS_MAINNET = "cronos-mainnet",
    CRONOS_TESTNET = "cronos-testnet",
    CRONOS_ZKEVM_TESTNET = "cronos-zkevm-testnet",
    AURORA_MAINNET = "aurora-mainnet",
    AURORA_TESTNET = "aurora-testnet",
    EMERALD_PARATIME_MAINNET = "emerald-paratime-mainnet",
    DEFI_KINGDOMS_MAINNET = "defi-kingdoms-mainnet",
    DEFI_KINGDOMS_TESTNET = "defi-kingdoms-testnet",
    BOBA_MAINNET = "boba-mainnet",
    BOBA_BNB_MAINNET = "boba-bnb-mainnet",
    BOBA_BNB_TESTNET = "boba-bnb-testnet",
    SCROLL_SEPOLIA_TESTNET = "scroll-sepolia-testnet",
    METIS_MAINNET = "metis-mainnet",
    METIS_STARDUST = "metis-stardust",
    AVALANCHE_DEXALOT_MAINNET = "avalanche-dexalot-mainnet",
    AVALANCHE_DEXALOT_TESTNET = "avalanche-dexalot-testnet",
    AVALANCHE_SHRAPNEL_MAINNET = "avalanche-shrapnel-mainnet",
    AVALANCHE_NUMBERS = "avalanche-numbers",
    AVALANCHE_DOS = "avalanche-dos",
    AVALANCHE_XPLUS = "avalanche-xplus",
    AVALANCHE_XANACHAIN = "avalanche-xanachain",
    AVALANCHE_STEP_NETWORK = "avalanche-step-network",
    AVALANCHE_SHRAPNEL_TESTNET = "avalanche-shrapnel-testnet",
    AVALANCHE_BEAM_TESTNET = "avalanche-beam-testnet",
    AVALANCHE_BLITZ_TESTNET = "avalanche-blitz-testnet",
    AVALANCHE_MINTARA_TESTNET = "avalanche-mintara-testnet",
    AVALANCHE_GREEN_DOT_TESTNET = "avalanche-green-dot-testnet",
    AVALANCHE_PULSAR_TESTNET = "avalanche-pulsar-testnet",
    AVALANCHE_UPTN = "avalanche-uptn",
    AVALANCHE_AVACLOUD_TESTNET = "avalanche-avacloud-testnet",
    AVALANCHE_BEAM_MAINNET = "avalanche-beam-mainnet",
    AVALANCHE_BULLETIN_TESTNET = "avalanche-bulletin-testnet",
    AVALANCHE_CONDUIT_TESTNET = "avalanche-conduit-testnet",
    AVALANCHE_HERO_TESTNET = "avalanche-hero-testnet",
    AVALANCHE_HUBBLE_EXCHANGE_TESTNET = "avalanche-hubble-exchange-testnet",
    AVALANCHE_KIWI_TESTNET = "avalanche-kiwi-testnet",
    AVALANCHE_MIHO_TESTNET = "avalanche-miho-testnet",
    AVALANCHE_MONDRIAN_TESTNET = "avalanche-mondrian-testnet",
    AVALANCHE_NMAC_TESTNET = "avalanche-nmac-testnet",
    AVALANCHE_ORDERLY_TESTNET = "avalanche-orderly-testnet",
    AVALANCHE_THIRDWEB_TESTNET = "avalanche-thirdweb-testnet",
    AVALANCHE_WAGMI_TESTNET = "avalanche-wagmi-testnet",
    AVALANCHE_PLAYA3ULL_TESTNET = "avalanche-playa3ull-testnet",
    AVALANCHE_MIRAI_TESTNET = "avalanche-mirai-testnet",
    AVALANCHE_AMPLIFY_TESTNET = "avalanche-amplify-testnet",
    AVALANCHE_LT0_TESTNET = "avalanche-lt0-testnet",
    AVALANCHE_LT5_TESTNET = "avalanche-lt5-testnet",
    AVALANCHE_HUBBLE_EXCHANGE_MAINNET = "avalanche-hubble-exchange-mainnet",
    METER_MAINNET = "meter-mainnet",
    METER_TESTNET = "meter-testnet",
    MILKOMEDA_A1_MAINNET = "milkomeda-a1-mainnet",
    MILKOMEDA_C1_MAINNET = "milkomeda-c1-mainnet",
    MILKOMEDA_C1_DEVNET = "milkomeda-c1-devnet",
    CANTO_MAINNET = "canto-mainnet",
    FLARENETWORKS_FLARE_MAINNET = "flarenetworks-flare-mainnet",
    FLARENETWORKS_FLARE_TESTNET = "flarenetworks-flare-testnet",
    FLARENETWORKS_CANARY_MAINNET = "flarenetworks-canary-mainnet",
    FLARENETWORKS_CANARY_TESTNET = "flarenetworks-canary-testnet",
    KCC_MAINNET = "kcc-mainnet",
    KCC_TESTNET = "kcc-testnet",
    LINEA_MAINNET = "linea-mainnet",
    POLYGON_ZKEVM_MAINNET = "polygon-zkevm-mainnet",
    LINEA_SEPOLIA_TESTNET = "linea-sepolia-testnet",
    LINEA_GOERLI_TESTNET = "linea-goerli-testnet",
    POLYGON_ZKEVM_TESTNET = "polygon-zkevm-testnet",
    POLYGON_AMOY_TESTNET = "polygon-amoy-testnet",
    MANTLE_MAINNET = "mantle-mainnet",
    MANTLE_SEPOLIA_TESTNET = "mantle-sepolia-testnet",
    POLYGON_ZKEVM_CARDONA_TESTNET = "polygon-zkevm-cardona-testnet",
    BASE_MAINNET = "base-mainnet",
    BASE_TESTNET = "base-testnet",
    BASE_SEPOLIA_TESTNET = "base-sepolia-testnet",
    OASYS_MAINNET = "oasys-mainnet",
    OASYS_TESTNET = "oasys-testnet",
    SX_MAINNET = "sx-mainnet",
    LUMOZ_PUBLIC_ZKSYNC_V2 = "lumoz-public-zksync-v2",
    LUMOZ_STARK_SPORT = "lumoz-stark-sport",
    OASIS_SAPPHIRE_MAINNET = "oasis-sapphire-mainnet",
    OASIS_SAPPHIRE_TESTNET = "oasis-sapphire-testnet",
    SYNDR_TESTNET = "syndr-testnet",
    XAI_MAINNET = "xai-mainnet",
    CELO_MAINNET = "celo-mainnet",
    X1_MAINNET = "x1-mainnet",
    CROSSFI_EVM_TESTNET = "crossfi-evm-testnet",
    HORIZEN_EON_MAINNET = "horizen-eon-mainnet",
    HORIZEN_GOBI_TESTNET = "horizen-gobi-testnet",
    FRAXTAL_MAINNET = "fraxtal-mainnet",
    APECHAIN_TESTNET = "apechain-testnet",
    LISK_MAINNET = "lisk-mainnet",
    REDSTONE_MAINNET = "redstone-mainnet",
    SEI_MAINNET = "sei-mainnet",
    AVALANCHE_MELD_TESTNET = "avalanche-meld-testnet",
    AVALANCHE_MELD_MAINNET = "avalanche-meld-mainnet",
    GUNZILLA_TESTNET = "gunzilla-testnet",
    ULTRON_MAINNET = "ultron-mainnet",
    ULTRON_TESTNET = "ultron-testnet",
    ZORA_MAINNET = "zora-mainnet",
    ZORA_SEPOLIA_TESTNET = "zora-sepolia-testnet",
    LISK_SEPOLIA_TESTNET = "lisk-sepolia-testnet",
    OPSIDE_READON_CONTENT_TESTNET = "opside-readon-content-testnet",
    ZKSYNC_MAINNET = "zksync-mainnet",
    ZKSYNC_SEPOLIA_TESTNET = "zksync-sepolia-testnet",
    BNB_ANTIMATTER_TESTNET = "bnb-antimatter-testnet",
    BNB_META_APES_MAINNET = "bnb-meta-apes-mainnet",
    BNB_FNCY_MAINNET = "bnb-fncy-mainnet",
    BNB_OPBNB_TESTNET = "bnb-opbnb-testnet",
    BNB_FNCY_TESTNET = "bnb-fncy-testnet",
    BNB_OPBNB_MAINNET = "bnb-opbnb-mainnet",
    ZETACHAIN_TESTNET = "zetachain-testnet",
    ZETACHAIN_MAINNET = "zetachain-mainnet",
    MODE_TESTNET = "mode-testnet",
    MODE_MAINNET = "mode-mainnet",
    KINTO_TESTNET = "kinto-testnet",
    LOOT_MAINNET = "loot-mainnet",
    PGN_MAINNET = "pgn-mainnet",
    PGN_TESTNET = "pgn-testnet",
    MANTA_SEPOLIA_TESTNET = "manta-sepolia-testnet",
    ROLLUX_MAINNET = "rollux-mainnet",
    ROLLUX_TESTNET = "rollux-testnet",
    GNOSIS_MAINNET = "gnosis-mainnet",
    GNOSIS_TESTNET = "gnosis-testnet",
    TELOS_MAINNET = "telos-mainnet",
    TELOS_TESTNET = "telos-testnet",
    TOMOCHAIN_MAINNET = "tomochain-mainnet",
    TOMOCHAIN_TESTNET = "tomochain-testnet",
    TAIKO_MAINNET = "taiko-mainnet",
    TAIKO_HEKLA_TESTNET = "taiko-hekla-testnet",
    MERLIN_MAINNET = "merlin-mainnet",
    MERLIN_TESTNET = "merlin-testnet",
    BLAST_MAINNET = "blast-mainnet",
    MOVEMENT_MEVM_TESTNET = "movement-mevm-testnet",
    SCROLL_MAINNET = "scroll-mainnet",
    COVALENT_INTERNAL_NETWORK_V1 = "covalent-internal-network-v1"
}
export declare enum ChainID {
    ETH_MAINNET = 1,
    ETH_GOERLI = 5,
    ETH_SEPOLIA = 11155111,
    ETH_HOLESKY = 17000,
    MATIC_MAINNET = 137,
    MATIC_MUMBAI = 80001,
    AVALANCHE_MAINNET = 43114,
    AVALANCHE_TESTNET = 43113,
    BSC_MAINNET = 56,
    BSC_TESTNET = 97,
    MOONBEAM_MAINNET = 1284,
    MOONBEAM_MOONBASE_ALPHA = 1287,
    MOONBEAM_MOONRIVER = 1285,
    RSK_MAINNET = 30,
    RSK_TESTNET = 31,
    ARBITRUM_MAINNET = 42161,
    ARBITRUM_NOVA_MAINNET = 42170,
    ARBITRUM_SEPOLIA = 421614,
    FANTOM_MAINNET = 250,
    FANTOM_TESTNET = 4002,
    PALM_MAINNET = 11297108109,
    PALM_TESTNET = 11297108099,
    BTC_MAINNET = 20090103,
    SOLANA_MAINNET = 1399811149,
    AXIE_MAINNET = 2020,
    OPTIMISM_MAINNET = 10,
    OPTIMISM_SEPOLIA = 11155420,
    EVMOS_MAINNET = 9001,
    EVMOS_TESTNET = 9000,
    HARMONY_MAINNET = 1666600000,
    HARMONY_TESTNET = 1666700000,
    CRONOS_MAINNET = 25,
    CRONOS_TESTNET = 338,
    CRONOS_ZKEVM_TESTNET = 282,
    AURORA_MAINNET = 1313161554,
    AURORA_TESTNET = 1313161555,
    EMERALD_PARATIME_MAINNET = 42262,
    DEFI_KINGDOMS_MAINNET = 53935,
    DEFI_KINGDOMS_TESTNET = 335,
    BOBA_MAINNET = 288,
    BOBA_BNB_MAINNET = 56288,
    BOBA_BNB_TESTNET = 9728,
    SCROLL_SEPOLIA_TESTNET = 534351,
    METIS_MAINNET = 1088,
    METIS_STARDUST = 588,
    AVALANCHE_DEXALOT_MAINNET = 432204,
    AVALANCHE_DEXALOT_TESTNET = 432201,
    AVALANCHE_SHRAPNEL_MAINNET = 2044,
    AVALANCHE_NUMBERS = 10507,
    AVALANCHE_DOS = 7979,
    AVALANCHE_XPLUS = 1228,
    AVALANCHE_XANACHAIN = 8888,
    AVALANCHE_STEP_NETWORK = 1234,
    AVALANCHE_SHRAPNEL_TESTNET = 2038,
    AVALANCHE_BEAM_TESTNET = 13337,
    AVALANCHE_BLITZ_TESTNET = 1343,
    AVALANCHE_MINTARA_TESTNET = 1079,
    AVALANCHE_GREEN_DOT_TESTNET = 6765897100,
    AVALANCHE_PULSAR_TESTNET = 431234,
    AVALANCHE_UPTN = 6119,
    AVALANCHE_AVACLOUD_TESTNET = 152703,
    AVALANCHE_BEAM_MAINNET = 4337,
    AVALANCHE_BULLETIN_TESTNET = 78431,
    AVALANCHE_CONDUIT_TESTNET = 78432,
    AVALANCHE_HERO_TESTNET = 17772,
    AVALANCHE_HUBBLE_EXCHANGE_TESTNET = 321123,
    AVALANCHE_KIWI_TESTNET = 2037,
    AVALANCHE_MIHO_TESTNET = 360163,
    AVALANCHE_MONDRIAN_TESTNET = 179188,
    AVALANCHE_NMAC_TESTNET = 7777,
    AVALANCHE_ORDERLY_TESTNET = 986532,
    AVALANCHE_THIRDWEB_TESTNET = 894538,
    AVALANCHE_WAGMI_TESTNET = 11111,
    AVALANCHE_PLAYA3ULL_TESTNET = 3012,
    AVALANCHE_MIRAI_TESTNET = 2195,
    AVALANCHE_AMPLIFY_TESTNET = 78430,
    AVALANCHE_LT0_TESTNET = 31330,
    AVALANCHE_LT5_TESTNET = 31335,
    AVALANCHE_HUBBLE_EXCHANGE_MAINNET = 1992,
    METER_MAINNET = 82,
    METER_TESTNET = 83,
    MILKOMEDA_A1_MAINNET = 2002,
    MILKOMEDA_C1_MAINNET = 2001,
    MILKOMEDA_C1_DEVNET = 200101,
    CANTO_MAINNET = 7700,
    FLARENETWORKS_FLARE_MAINNET = 14,
    FLARENETWORKS_FLARE_TESTNET = 114,
    FLARENETWORKS_CANARY_MAINNET = 19,
    FLARENETWORKS_CANARY_TESTNET = 16,
    KCC_MAINNET = 321,
    KCC_TESTNET = 322,
    LINEA_MAINNET = 59144,
    POLYGON_ZKEVM_MAINNET = 1101,
    LINEA_SEPOLIA_TESTNET = 59141,
    LINEA_GOERLI_TESTNET = 59140,
    POLYGON_ZKEVM_TESTNET = 1422,
    POLYGON_AMOY_TESTNET = 80002,
    MANTLE_MAINNET = 5000,
    MANTLE_SEPOLIA_TESTNET = 5003,
    POLYGON_ZKEVM_CARDONA_TESTNET = 2442,
    BASE_MAINNET = 8453,
    BASE_TESTNET = 84531,
    BASE_SEPOLIA_TESTNET = 84532,
    OASYS_MAINNET = 248,
    OASYS_TESTNET = 9372,
    SX_MAINNET = 416,
    LUMOZ_PUBLIC_ZKSYNC_V2 = 12027,
    LUMOZ_STARK_SPORT = 12029,
    OASIS_SAPPHIRE_MAINNET = 23294,
    OASIS_SAPPHIRE_TESTNET = 23295,
    SYNDR_TESTNET = 412346,
    XAI_MAINNET = 660279,
    CELO_MAINNET = 42220,
    X1_MAINNET = 196,
    CROSSFI_EVM_TESTNET = 8545,
    HORIZEN_EON_MAINNET = 7332,
    HORIZEN_GOBI_TESTNET = 1663,
    FRAXTAL_MAINNET = 252,
    APECHAIN_TESTNET = 1798,
    LISK_MAINNET = 1135,
    REDSTONE_MAINNET = 690,
    SEI_MAINNET = 1329,
    AVALANCHE_MELD_TESTNET = 222000222,
    AVALANCHE_MELD_MAINNET = 333000333,
    GUNZILLA_TESTNET = 49321,
    ULTRON_MAINNET = 1231,
    ULTRON_TESTNET = 1230,
    ZORA_MAINNET = 7777777,
    ZORA_SEPOLIA_TESTNET = 999999999,
    LISK_SEPOLIA_TESTNET = 4202,
    OPSIDE_READON_CONTENT_TESTNET = 12015,
    ZKSYNC_MAINNET = 324,
    ZKSYNC_SEPOLIA_TESTNET = 300,
    BNB_ANTIMATTER_TESTNET = 20221,
    BNB_META_APES_MAINNET = 16350,
    BNB_FNCY_MAINNET = 73,
    BNB_OPBNB_TESTNET = 5611,
    BNB_FNCY_TESTNET = 923018,
    BNB_OPBNB_MAINNET = 204,
    ZETACHAIN_TESTNET = 7001,
    ZETACHAIN_MAINNET = 7000,
    MODE_TESTNET = 919,
    MODE_MAINNET = 34443,
    KINTO_TESTNET = 42888,
    LOOT_MAINNET = 5151706,
    PGN_MAINNET = 424,
    PGN_TESTNET = 58008,
    MANTA_SEPOLIA_TESTNET = 3441006,
    ROLLUX_MAINNET = 570,
    ROLLUX_TESTNET = 57000,
    GNOSIS_MAINNET = 100,
    GNOSIS_TESTNET = 10200,
    TELOS_MAINNET = 40,
    TELOS_TESTNET = 41,
    TOMOCHAIN_MAINNET = 88,
    TOMOCHAIN_TESTNET = 89,
    TAIKO_MAINNET = 167000,
    TAIKO_HEKLA_TESTNET = 167009,
    MERLIN_MAINNET = 4200,
    MERLIN_TESTNET = 686868,
    BLAST_MAINNET = 81457,
    MOVEMENT_MEVM_TESTNET = 336,
    SCROLL_MAINNET = 534352,
    COVALENT_INTERNAL_NETWORK_V1 = 1131378225
}
export type Chain = ChainID | ChainName | `${ChainName}` | `${ChainID}`;
export type Source = "Ponder" | "GoldRush" | "Viem";
export type Quote = "USD" | "CAD" | "EUR" | "SGD" | "INR" | "JPY" | "VND" | "CNY" | "KRW" | "RUB" | "TRY" | "NGN" | "ARS" | "AUD" | "CHF" | "GBP";
export interface Pagination {
    /** * True is there is another page. */
    has_more: boolean;
    /** * The requested page number. */
    page_number: number;
    /** * The requested number of items on the current page. */
    page_size: number;
    /** * The total number of items across all pages for this request. */
    total_count: number;
}
export interface PaginationLinks {
    /** * URL link to the next page. */
    prev: string;
    /** * URL link to the previous page. */
    next: string;
}
export interface NftCollectionAttribute {
    trait_type: string;
    value: string;
}
export type NftData = Nullable<{
    /** * The token's id. */
    token_id: bigint;
    token_url: string;
    /** * The original minter. */
    original_owner: string;
    /** * The current holder of this NFT. */
    current_owner: string;
    external_data: NftExternalData;
    /** * If `true`, the asset data is available from the Covalent CDN. */
    asset_cached: boolean;
    /** * If `true`, the image data is available from the Covalent CDN. */
    image_cached: boolean;
}>;
export interface NftExternalData {
    name: string;
    description: string;
    asset_url: string;
    asset_file_extension: string;
    asset_mime_type: string;
    asset_size_bytes: string;
    image: string;
    image_256: string;
    image_512: string;
    image_1024: string;
    animation_url: string;
    external_url: string;
    attributes: NftCollectionAttribute[];
}
export interface DecodedItem {
    name: string;
    signature: string;
    params: Param[];
}
export interface Param {
    name: string;
    type: string;
    indexed: boolean;
    decoded: boolean;
    value: string;
}
export type LogEvent = Nullable<{
    /** * The block signed timestamp in UTC. */
    block_signed_at: Date;
    /** * The height of the block. */
    block_height: number;
    /** * The offset is the position of the tx in the block. */
    tx_offset: number;
    /** * The offset is the position of the log entry within an event log. */
    log_offset: number;
    /** * The requested transaction hash. */
    tx_hash: string;
    /** * The log topics in raw data. */
    raw_log_topics: string[];
    /** * Use contract decimals to format the token balance for display purposes - divide the balance by `10^{contract_decimals}`. */
    sender_contract_decimals: number;
    /** * The name of the sender. */
    sender_name: string;
    sender_contract_ticker_symbol: string;
    /** * The address of the sender. */
    sender_address: string;
    /** * The label of the sender address. */
    sender_address_label: string;
    /** * The contract logo URL. */
    sender_logo_url: string;
    /** * A list of supported standard ERC interfaces, eg: `ERC20` and `ERC721`. */
    supports_erc: string[];
    /** * The address of the deployed UniswapV2 like factory contract for this DEX. */
    sender_factory_address: string;
    /** * The log events in raw. */
    raw_log_data: string;
    /** * The decoded item. */
    decoded: DecodedItem;
}>;
export interface ContractMetadata {
    /** * Use contract decimals to format the token balance for display purposes - divide the balance by `10^{contract_decimals}`. */
    contract_decimals: number;
    /** * The string returned by the `name()` method. */
    contract_name: string;
    /** * The ticker symbol for this contract. This field is set by a developer and non-unique across a network. */
    contract_ticker_symbol: string;
    /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */
    contract_address: string;
    /** * A list of supported standard ERC interfaces, eg: `ERC20` and `ERC721`. */
    supports_erc: string[];
    /** * The contract logo URL. */
    logo_url: string;
}
export interface Explorer {
    /** * The name of the explorer. */
    label: string;
    /** * The URL of the explorer. */
    url: string;
}
export interface LogoUrls {
    /** * The token logo URL. */
    token_logo_url: string;
    /** * The protocol logo URL. */
    protocol_logo_url: string;
    /** * The chain logo URL. */
    chain_logo_url: string;
}
export type GoldRushResponse<T> = {
    data: T;
    error: false | null;
    error_code: null;
    error_message: null;
} | {
    data: null;
    error: true;
    error_code: number;
    error_message: string;
};
export interface GoldRushClientSettings {
    /** * Toggle to analyze the execution of each api request. */
    debug?: boolean;
    /** * The number of concurrent requests allowed. */
    threadCount?: number;
    /** Toggle to turn on and off retry logic */
    enableRetry?: boolean;
    /** Set the retry logic count */
    maxRetries?: number;
    /** Set the retry delay in ms */
    retryDelay?: number;
    /** Set the source of the usage */
    source?: Source | string;
}
export type Nullable<T> = {
    [P in keyof T]: T[P] | null;
};
