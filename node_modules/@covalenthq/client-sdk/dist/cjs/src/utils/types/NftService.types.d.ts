import { type ChainID, type ChainName, type LogEvent, type NftData, type Nullable, type Pagination } from "./Generic.types";
export type ChainCollectionResponse = Nullable<{
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: ChainID;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: ChainName;
    /** * List of response items. */
    items: ChainCollectionItem[];
    /** * Pagination metadata. */
    pagination: Pagination;
}>;
export type ChainCollectionItem = Nullable<{
    /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */
    contract_address: string;
    /** * The string returned by the `name()` method. */
    contract_name: string;
    /** * Denotes whether the token is suspected spam. Supports `eth-mainnet` and `matic-mainnet`. */
    is_spam: boolean;
    token_total_supply: number;
    cached_metadata_count: number;
    cached_asset_count: number;
    last_scraped_at: Date;
}>;
export type NftAddressBalanceNftResponse = Nullable<{
    /** * The requested address. */
    address: string;
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * List of response items. */
    items: NftTokenContractBalanceItem[];
}>;
export type NftTokenContractBalanceItem = Nullable<{
    /** * The string returned by the `name()` method. */
    contract_name: string;
    /** * The ticker symbol for this contract. This field is set by a developer and non-unique across a network. */
    contract_ticker_symbol: string;
    /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */
    contract_address: string;
    /** * A list of supported standard ERC interfaces, eg: `ERC20` and `ERC721`. */
    supports_erc: string[];
    /** * Denotes whether the token is suspected spam. Supports `eth-mainnet` and `matic-mainnet`. */
    is_spam: boolean;
    last_transfered_at: Date;
    /** * The asset balance. Use `contract_decimals` to scale this balance for display purposes. */
    balance: bigint;
    balance_24h: bigint;
    type: string;
    /** * The current floor price converted to fiat in `quote-currency`. The floor price is determined by the last minimum sale price within the last 30 days across all the supported markets where the collection is sold on. */
    floor_price_quote: number;
    /** * A prettier version of the floor price quote for rendering purposes. */
    pretty_floor_price_quote: string;
    /** * The current floor price in native currency. The floor price is determined by the last minimum sale price within the last 30 days across all the supported markets where the collection is sold on. */
    floor_price_native_quote: number;
    nft_data: NftData[];
}>;
export type NftMetadataResponse = Nullable<{
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * List of response items. */
    items: NftTokenContract[];
    /** * Pagination metadata. */
    pagination: Pagination;
}>;
export type NftTokenContract = Nullable<{
    /** * The string returned by the `name()` method. */
    contract_name: string;
    /** * The ticker symbol for this contract. This field is set by a developer and non-unique across a network. */
    contract_ticker_symbol: string;
    /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */
    contract_address: string;
    /** * Denotes whether the token is suspected spam. Supports `eth-mainnet` and `matic-mainnet`. */
    is_spam: boolean;
    type: string;
    nft_data: NftData;
}>;
export type NftTransactionsResponse = Nullable<{
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested chain ID eg: `1`. */
    chain_id: ChainID;
    /** * The requested chain name eg: `eth-mainnet`. */
    chain_name: ChainName;
    /** * List of response items. */
    items: NftTransaction[];
}>;
export type NftTransaction = Nullable<{
    /** * Use contract decimals to format the token balance for display purposes - divide the balance by `10^{contract_decimals}`. */
    contract_decimals: number;
    /** * The string returned by the `name()` method. */
    contract_name: string;
    /** * The ticker symbol for this contract. This field is set by a developer and non-unique across a network. */
    contract_ticker_symbol: string;
    /** * The contract logo URL. */
    logo_url: string;
    /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */
    contract_address: string;
    /** * A list of supported standard ERC interfaces, eg: `ERC20` and `ERC721`. */
    supports_erc: string[];
    nft_transactions: NftTransactionItem[];
    /** * Denotes whether the token is suspected spam. Supports `eth-mainnet` and `matic-mainnet`. */
    is_spam: boolean;
}>;
export type NftTransactionItem = Nullable<{
    /** * The block signed timestamp in UTC. */
    block_signed_at: Date;
    /** * The height of the block. */
    block_height: number;
    /** * The requested transaction hash. */
    tx_hash: string;
    /** * The offset is the position of the tx in the block. */
    tx_offset: number;
    /** * Whether or not transaction is successful. */
    successful: boolean;
    /** * The sender's wallet address. */
    from_address: string;
    /** * The label of `from` address. */
    from_address_label: string;
    /** * The receiver's wallet address. */
    to_address: string;
    /** * The label of `to` address. */
    to_address_label: string;
    /** * The value attached to this tx. */
    value: bigint;
    /** * The value attached in `quote-currency` to this tx. */
    value_quote: number;
    /** * A prettier version of the quote for rendering purposes. */
    pretty_value_quote: string;
    gas_offered: number;
    /** * The gas spent for this tx. */
    gas_spent: number;
    /** * The gas price at the time of this tx. */
    gas_price: number;
    /** * The total transaction fees (gas_price * gas_spent) paid for this tx, denoted in wei. */
    fees_paid: bigint;
    /** * The gas spent in `quote-currency` denomination. */
    gas_quote: number;
    /** * A prettier version of the quote for rendering purposes. */
    pretty_gas_quote: string;
    gas_quote_rate: number;
    /** * The log events. */
    log_events: LogEvent[];
}>;
export type NftCollectionTraitsResponse = Nullable<{
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * List of response items. */
    items: NftTrait[];
}>;
export type NftTrait = Nullable<{
    name: string;
}>;
export type NftCollectionAttributesForTraitResponse = Nullable<{
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * List of response items. */
    items: NftSummaryAttribute[];
}>;
export type NftSummaryAttribute = Nullable<{
    trait_type: string;
    values: NftAttribute[];
    unique_values: number;
}>;
export type NftAttribute = Nullable<{
    value: string;
    count: number;
}>;
export type NftCollectionTraitsSummaryResponse = Nullable<{
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * List of response items. */
    items: NftTraitSummary[];
}>;
export type NftTraitSummary = Nullable<{
    /** * Trait name */
    name: string;
    /** * Type of the value of the trait. */
    value_type: string;
    /** * Populated for `numeric` traits. */
    value_numeric: NftTraitNumeric;
    /** * Populated for `string` traits. */
    value_string: NftTraitString;
    attributes: NftSummaryAttribute[];
}>;
export type NftTraitNumeric = Nullable<{
    min: number;
    max: number;
}>;
export type NftTraitString = Nullable<{
    /** * String value */
    value: string;
    /** * Number of distinct tokens that have this trait value. */
    token_count: number;
    /** * Percentage of tokens in the collection that have this trait. */
    trait_percentage: number;
}>;
export type NftOwnershipForCollectionResponse = Nullable<{
    /** * The timestamp when the response was generated. Useful to show data staleness to users. */
    updated_at: Date;
    /** * The requested address. */
    address: string;
    /** * The requested collection. */
    collection: string;
    /** * Denotes whether the token is suspected spam. Supports `eth-mainnet` and `matic-mainnet`. */
    is_spam: boolean;
    /** * List of response items. */
    items: NftOwnershipForCollectionItem[];
}>;
export type NftOwnershipForCollectionItem = Nullable<{
    /** * The string returned by the `name()` method. */
    contract_name: string;
    /** * The ticker symbol for this contract. This field is set by a developer and non-unique across a network. */
    contract_ticker_symbol: string;
    /** * Use the relevant `contract_address` to lookup prices, logos, token transfers, etc. */
    contract_address: string;
    /** * The token's id. */
    token_id: bigint;
    /** * A list of supported standard ERC interfaces, eg: `ERC20` and `ERC721`. */
    supports_erc: string[];
    last_transfered_at: Date;
    /** * Nft balance. */
    balance: bigint;
    balance_24h: bigint;
    type: string;
    nft_data: NftData;
}>;
export type GetChainCollectionsQueryParamOpts = Nullable<{
    /** * Number of items per page. Omitting this parameter defaults to 100. */
    pageSize?: number;
    /** * 0-indexed page number to begin pagination. */
    pageNumber?: number;
    /** * If `true`, the suspected spam tokens are removed. Supports `eth-mainnet` and `matic-mainnet`. */
    noSpam?: boolean;
}>;
export type GetNftsForAddressQueryParamOpts = Nullable<{
    /** * If `true`, the suspected spam tokens are removed. Supports `eth-mainnet` and `matic-mainnet`. */
    noSpam?: boolean;
    /** * If `true`, the response shape is limited to a list of collections and token ids, omitting metadata and asset information. Helpful for faster response times and wallets holding a large number of NFTs. */
    noNftAssetMetadata?: boolean;
    /** * By default, this endpoint only works on chains where we've cached the assets and the metadata. When set to `true`, the API will fetch metadata from upstream servers even if it's not cached - the downside being that the upstream server can block or rate limit the call and therefore resulting in time outs or slow response times on the Covalent side. */
    withUncached?: boolean;
}>;
export type GetTokenIdsForContractWithMetadataQueryParamOpts = Nullable<{
    /** * Omit metadata. */
    noMetadata?: boolean;
    /** * Number of items per page. Omitting this parameter defaults to 100. */
    pageSize?: number;
    /** * 0-indexed page number to begin pagination. */
    pageNumber?: number;
    /** * Filters NFTs based on a specific trait. If this filter is used, the API will return all NFTs with the specified trait. Accepts comma-separated values, is case-sensitive, and requires proper URL encoding. */
    traitsFilter?: string;
    /** * Filters NFTs based on a specific trait value. If this filter is used, the API will return all NFTs with the specified trait value. If used with "traits-filter", only NFTs matching both filters will be returned. Accepts comma-separated values, is case-sensitive, and requires proper URL encoding. */
    valuesFilter?: string;
    /** * By default, this endpoint only works on chains where we've cached the assets and the metadata. When set to `true`, the API will fetch metadata from upstream servers even if it's not cached - the downside being that the upstream server can block or rate limit the call and therefore resulting in time outs or slow response times on the Covalent side. */
    withUncached?: boolean;
}>;
export type GetNftMetadataForGivenTokenIdForContractQueryParamOpts = Nullable<{
    /** * Omit metadata. */
    noMetadata?: boolean;
    /** * By default, this endpoint only works on chains where we've cached the assets and the metadata. When set to `true`, the API will fetch metadata from upstream servers even if it's not cached - the downside being that the upstream server can block or rate limit the call and therefore resulting in time outs or slow response times on the Covalent side. */
    withUncached?: boolean;
}>;
export type GetNftTransactionsForContractTokenIdQueryParamOpts = Nullable<{
    /** * If `true`, the suspected spam tokens are removed. Supports `eth-mainnet` and `matic-mainnet`. */
    noSpam?: boolean;
}>;
export type CheckOwnershipInNftQueryParamOpts = Nullable<{
    /** * Filters NFTs based on a specific trait. If this filter is used, the API will return all NFTs with the specified trait. Must be used with "values-filter", is case-sensitive, and requires proper URL encoding. */
    traitsFilter?: string;
    /** * Filters NFTs based on a specific trait value. If this filter is used, the API will return all NFTs with the specified trait value. Must be used with "traits-filter", is case-sensitive, and requires proper URL encoding. */
    valuesFilter?: string;
}>;
